let not_in = \k. if k = 0 then 0 else S 0 in
let rec subtract = \x.\y. if y = 0 then x else  minus_one (subtract x (minus_one y)) in
let le = \a.\b. if not_in (subtract a b) = 0 then S 0
                else if not_in (subtract a b) = S 0 then 0
                else if a = b then S 0
                else S 0 in
let rec append = \l1.\l2. if l1 = # then l2
                else (hd l1):(append(tl l1) (l2)) in
let rec insert = \i.\l. if l = # then i:#
                else if le i (hd l) = S 0 then append (i:#) (l)
                else (hd l):(insert i (tl l)) in
let rec sort = \m. if m = # then #
               else insert (hd m) (sort (tl m)) in sort S S 0:S 0:0:#

// Sort was a difficult one which needed several helper functions and also needed to use the append function
// We wrote earlier.
// If the list is empty, return what you have.
// It works by first calling insert, which calls le, which can call append or insert again
// Le can call sub.
// These work to reorder the elements in order to sort them
// It does thus by comparing the values and then moving them with the sorting helper functions
// At the end of all the calls it reconstructs the list
