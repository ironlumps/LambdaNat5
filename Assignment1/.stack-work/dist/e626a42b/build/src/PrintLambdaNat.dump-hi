
==================== FINAL INTERFACE ====================
2019-10-02 22:50:50.9533688 UTC

interface LambdaNat-0.1.0.0-EvitBjaHhSP7BnBJ5PUt9C:PrintLambdaNat 8064
  interface hash: 0a09e934fdb0415a7efa9ac37116e521
  ABI hash: 1f9cf34164e2498e95557adce812935f
  export-list hash: 458f7771442595c7d5779bffe945a49d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 14c2cc79705a4419f265d275e12b2327
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  PrintLambdaNat.concatD
  PrintLambdaNat.concatS
  PrintLambdaNat.doc
  PrintLambdaNat.mkEsc
  PrintLambdaNat.parenth
  PrintLambdaNat.prPrec
  PrintLambdaNat.printTree
  PrintLambdaNat.render
  PrintLambdaNat.replicateS
  PrintLambdaNat.Doc
  PrintLambdaNat.Print{PrintLambdaNat.prt PrintLambdaNat.prtList}
module dependencies: AbsLambdaNat
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  AbsLambdaNat 04a76c481aadaee483d9743e82ab5ff6
  exports: dce3dbcb1796db0a7c2cc7d9c58b5d57
  EAbs 50acbaba9717770c7d78c2d05d4bd27c
  EApp cbafc0af3886455aafd8b0834b1a5391
  ECons 465741e75f669018b9cdb77825b5889a
  EFix ae8842ae31f10beb9ef109f282b97a9f
  EHd c500a92ed98a9e3a8f5c097ac9c11a5f
  EIf af8dc15618f09d04bffeaa04946dfb7f
  ELet c33dfc32c486672a86a3145ef086ed63
  EMinusOne b178edf2ab4d15bb095b366c6c66df61
  ENat0 ebb05270e8c3a0d38b8e1eb08f98a24b
  ENatS 10bbff1af592dd59b9cbfdbe90ddce83
  ENil ca08700cba7541c0e80ee1a5275656cc
  ERec c6aa78680aaae86272f2f31d686a99ab
  ETl b713211e2662a8c55c28edd8e72ee5ef
  EVar b571d194ff8d5f9f9d0bae44403364e3
  Exp 75dc4dd7f90173f13db2386bf021ccd3
  Id 6bf29625116d6b0a0ecbb7faeafe10fc
  Id 9607cd230e6ee57b357ee6334bb1cfae
  Prog 5aa67e399afe55920c1f04817ae4fa7f
  Program 589136324556dad1030302773e76c6fc
import  -/  base-4.12.0.0:Data.Char 2904a5c9a61cd1905998d0ede824665e
import  -/  base-4.12.0.0:Data.Foldable 6673f41a7644ecd4dda455d741d47ef8
import  -/  base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import  -/  base-4.12.0.0:GHC.List 63f1dc438c14c2ecfce50219fbb7ff35
import  -/  base-4.12.0.0:GHC.Num 009f4fca9200daff9e3ffbe2d7676a2f
import  -/  base-4.12.0.0:GHC.Show 48dce8b8129312101170e57c24f3ecbd
import  -/  base-4.12.0.0:GHC.Unicode c752a09a0fd61071e8c9c84d904e3f7e
import  -/  base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 34234e515bc4cbda6d7cda923884fd3f
8d55988a435b956b51a713248a82c556
  $dmprtList ::
    PrintLambdaNat.Print a =>
    GHC.Types.Int -> [a] -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C(C(U))),A)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a ($dPrint :: PrintLambdaNat.Print a) (i :: GHC.Types.Int) ->
                 let {
                   g :: a -> PrintLambdaNat.Doc = PrintLambdaNat.prt @ a $dPrint i
                 } in
                 \ (x :: [a]) ->
                 GHC.Base.foldr
                   @ a
                   @ ([GHC.Show.ShowS] -> [GHC.Show.ShowS])
                   (GHC.Base.mapFB
                      @ ([GHC.Show.ShowS] -> [GHC.Show.ShowS])
                      @ ([GHC.Show.ShowS] -> [GHC.Show.ShowS])
                      @ a
                      (GHC.Base..
                         @ [GHC.Show.ShowS]
                         @ [GHC.Show.ShowS]
                         @ [GHC.Show.ShowS])
                      g)
                   (GHC.Base.id @ [GHC.Show.ShowS])
                   x) -}
8d55988a435b956b51a713248a82c556
  $fPrintChar :: PrintLambdaNat.Print GHC.Types.Char
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  PrintLambdaNat.$fPrintChar_$cprt
                  PrintLambdaNat.$fPrintChar_$cprtList -}
05a9e530a2c3cca26a5fda6574ac9175
  $fPrintChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '"'#) -}
bab8f0e8018800211938f2e44f12460e
  $fPrintChar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   PrintLambdaNat.$fPrintChar3) -}
e9d5f68ae26595bd8ad04ff0e360d59c
  $fPrintChar3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\\\"#) -}
f67f8c2397cd10f3dbbcc6a242d4a48b
  $fPrintChar4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\\'#) -}
e6340bd00dbb355a6d5963f0959d8fdb
  $fPrintChar5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   PrintLambdaNat.$fPrintChar6) -}
48b14237e79a76be24cce649bfcc038d
  $fPrintChar6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\n"#) -}
837c2e4a985207a26f68a51d5d213303
  $fPrintChar7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   PrintLambdaNat.$fPrintChar8) -}
bb9987a19448278d5b2ad2a6e7ea2abf
  $fPrintChar8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\t"#) -}
40921f3a5fcd6e216a3b5e1e3f259203
  $fPrintChar9 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\''#) -}
56b3cd174bcb2a46e4dda65ca9b5abad
  $fPrintChar_$cprt ::
    GHC.Types.Int -> GHC.Types.Char -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><L,U(U)><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Char)
                   (w2 :: [GHC.Show.ShowS]) ->
                 case PrintLambdaNat.$w$cprt w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Show.ShowS ww1 ww2 }) -}
0c4c94a51e91272603c0617a6934bdd3
  $fPrintChar_$cprtList ::
    GHC.Types.Int -> [GHC.Types.Char] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Types.Char])
                   (w2 :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (\ (x :: GHC.Base.String) ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      PrintLambdaNat.$fPrintChar1
                      (PrintLambdaNat.$fPrintChar_go
                         w1
                         (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar1 x)))
                   w2) -}
9bd32610de5bc321e00d1a6e9adf6ad7
  $fPrintChar_go ::
    [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
8d55988a435b956b51a713248a82c556
  $fPrintDouble :: PrintLambdaNat.Print GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  PrintLambdaNat.$fPrintDouble_$cprt
                  PrintLambdaNat.$fPrintDouble_$cprtList -}
6e76f1d607818a0d8f1ec7a7a751693d
  $fPrintDouble_$cprt ::
    GHC.Types.Int -> GHC.Types.Double -> PrintLambdaNat.Doc
  {- Arity: 2, Strictness: <L,A><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Int) (x :: GHC.Types.Double) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (case x of ww { GHC.Types.D# ww1 ->
                    GHC.Float.$w$sshowSignedFloat
                      GHC.Float.$fShowDouble2
                      GHC.Show.$fShow(,)1
                      ww1 })) -}
7d2a2d192d5ea442b88ff67fab6cd30d
  $fPrintDouble_$cprtList ::
    GHC.Types.Int -> [GHC.Types.Double] -> PrintLambdaNat.Doc
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Double]) ->
                 PrintLambdaNat.$fPrintDouble_go w1) -}
3f3046a909c927b3dffbee7863ee7b58
  $fPrintDouble_go ::
    [GHC.Types.Double] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 1, Strictness: <S,1*U> -}
8d55988a435b956b51a713248a82c556
  $fPrintExp :: PrintLambdaNat.Print AbsLambdaNat.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Exp
                  PrintLambdaNat.$fPrintExp_$cprt
                  PrintLambdaNat.$fPrintExp_$cprtList -}
6d6fb9b9bf3f8bdecf8b74665331ee4e
  $fPrintExp_$cprt ::
    GHC.Types.Int -> AbsLambdaNat.Exp -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: AbsLambdaNat.Exp)
                   (w2 :: [GHC.Show.ShowS]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PrintLambdaNat.$w$cprt1 ww1 w1 w2 }) -}
b24c4136a4d3a5f9c85090c705039a6c
  $fPrintExp_$cprtList ::
    GHC.Types.Int -> [AbsLambdaNat.Exp] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int)
                   (eta :: [AbsLambdaNat.Exp])
                   (eta1 :: [GHC.Show.ShowS]) ->
                 letrec {
                   go :: [AbsLambdaNat.Exp] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [AbsLambdaNat.Exp]) (eta2 :: [GHC.Show.ShowS]) ->
                     case ds of wild {
                       [] -> eta2
                       : y ys
                       -> case i of ww { GHC.Types.I# ww1 ->
                          PrintLambdaNat.$w$cprt1 ww1 y (go ys eta2) } }
                 } in
                 go eta eta1) -}
8d55988a435b956b51a713248a82c556
  $fPrintId :: PrintLambdaNat.Print AbsLambdaNat.Id
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Id
                  PrintLambdaNat.$fPrintId_$cprt
                  PrintLambdaNat.$fPrintId_$cprtList -}
7df91b608bab1d153a53769b32c5c1a6
  $fPrintId_$cprt ::
    GHC.Types.Int -> AbsLambdaNat.Id -> PrintLambdaNat.Doc
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: AbsLambdaNat.Id)
                   (eta :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (GHC.Base.++ @ GHC.Types.Char ds1 `cast` (AbsLambdaNat.N:Id[0]))
                   eta) -}
bf08216826051129ea88f95a1d181816
  $fPrintId_$cprtList ::
    GHC.Types.Int -> [AbsLambdaNat.Id] -> PrintLambdaNat.Doc
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [AbsLambdaNat.Id])
                   (w2 :: [GHC.Show.ShowS]) ->
                 PrintLambdaNat.$fPrintId_go w1 w2) -}
feebf8fd43daec61352774eb1f880673
  $fPrintId_go ::
    [AbsLambdaNat.Id] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
8d55988a435b956b51a713248a82c556
  $fPrintInteger :: PrintLambdaNat.Print GHC.Integer.Type.Integer
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  PrintLambdaNat.$fPrintInteger_$cprt
                  PrintLambdaNat.$fPrintInteger_$cprtList -}
b763e1a200f16e3ab31b69afe10bd935
  $fPrintInteger_$cprt ::
    GHC.Types.Int -> GHC.Integer.Type.Integer -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: GHC.Integer.Type.Integer)
                   (eta :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   (\ (w2 :: GHC.Base.String) ->
                    case GHC.Show.$w$cshowsPrec4 0# x w2 of ww2 { (#,#) ww3 ww4 ->
                    GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                   eta) -}
9a9c97bc94646cff43270b3ea88ccc4d
  $fPrintInteger_$cprtList ::
    GHC.Types.Int -> [GHC.Integer.Type.Integer] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Integer.Type.Integer])
                   (w2 :: [GHC.Show.ShowS]) ->
                 PrintLambdaNat.$fPrintInteger_go w1 w2) -}
e5f3bd72f8508a2ec420611d5e11037f
  $fPrintInteger_go ::
    [GHC.Integer.Type.Integer] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
8d55988a435b956b51a713248a82c556
  $fPrintProgram :: PrintLambdaNat.Print AbsLambdaNat.Program
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Program
                  PrintLambdaNat.$fPrintProgram_$cprt
                  PrintLambdaNat.$fPrintProgram_$cprtList -}
5d0cab4ecb69582190a8565ca1b27aeb
  $fPrintProgram1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   PrintLambdaNat.$fPrintProgram2) -}
d44a8566aec7c7f6ce0e54d8ddd2f14d
  $fPrintProgram2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')'#) -}
abcfc4d76e736a0e576248ab4decb146
  $fPrintProgram3 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   PrintLambdaNat.$fPrintProgram4) -}
12c2497593b9a13b10dcd97b3a5b5f6e
  $fPrintProgram4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '('#) -}
5218130337c22808f8331107eb338785
  $fPrintProgram_$cprt ::
    GHC.Types.Int -> AbsLambdaNat.Program -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: AbsLambdaNat.Program)
                   (w2 :: [GHC.Show.ShowS]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { AbsLambdaNat.Prog ww3 ->
                 PrintLambdaNat.$w$cprt2 ww1 ww3 w2 } }) -}
d68d75954bb03f13203f904583aee611
  $fPrintProgram_$cprtList ::
    GHC.Types.Int -> [AbsLambdaNat.Program] -> PrintLambdaNat.Doc
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int)
                   (eta :: [AbsLambdaNat.Program])
                   (eta1 :: [GHC.Show.ShowS]) ->
                 letrec {
                   go :: [AbsLambdaNat.Program]
                         -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [AbsLambdaNat.Program]) (eta2 :: [GHC.Show.ShowS]) ->
                     case ds of wild {
                       [] -> eta2
                       : y ys
                       -> case i of ww { GHC.Types.I# ww1 ->
                          case y of ww2 { AbsLambdaNat.Prog ww3 ->
                          PrintLambdaNat.$w$cprt2 ww1 ww3 (go ys eta2) } } }
                 } in
                 go eta eta1) -}
8d55988a435b956b51a713248a82c556
  $fPrint[] :: PrintLambdaNat.Print a => PrintLambdaNat.Print [a]
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: PrintLambdaNat.Print a).
                  @ [a]
                  (PrintLambdaNat.prtList @ a v)
                  (PrintLambdaNat.$fPrint[]_$cprtList @ a v) -}
8d55988a435b956b51a713248a82c556
  $fPrint[]_$cprtList ::
    PrintLambdaNat.Print a =>
    GHC.Types.Int -> [[a]] -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C(C(U))))><L,U>,
     Unfolding: (\ @ a
                   ($dPrint :: PrintLambdaNat.Print a)
                   (i :: GHC.Types.Int) ->
                 let {
                   g :: [a] -> PrintLambdaNat.Doc
                   = PrintLambdaNat.prtList @ a $dPrint i
                 } in
                 letrec {
                   go :: [[a]] -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [[a]]) ->
                     case ds of wild {
                       [] -> GHC.Base.id @ [GHC.Show.ShowS]
                       : y ys
                       -> let {
                            ys1 :: [GHC.Show.ShowS] -> [GHC.Show.ShowS] = go ys
                          } in
                          let {
                            f57 :: [GHC.Show.ShowS] -> [GHC.Show.ShowS] = g y
                          } in
                          \ (x :: [GHC.Show.ShowS]) -> f57 (ys1 x) }
                 } in
                 \ (x :: [[a]]) -> go x) -}
16097e6396fd5467f3e55a7e5cff1c67
  $tc'C:Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12416641116282257745##
                   3803049583041882186##
                   PrintLambdaNat.$trModule
                   PrintLambdaNat.$tc'C:Print2
                   1#
                   PrintLambdaNat.$tc'C:Print1) -}
81e6f1f9336d406501ee3bacccb655a4
  $tc'C:Print1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62a0b59bbbf80f6470ff84310ebf053f
  $tc'C:Print2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$tc'C:Print3) -}
28c0ab2907d54bfe133f8f2d0896fc11
  $tc'C:Print3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Print"#) -}
6b56edcfa669d4049264b84fae60e4c0
  $tcPrint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11415894691329944642##
                   15843253234729275070##
                   PrintLambdaNat.$trModule
                   PrintLambdaNat.$tcPrint2
                   0#
                   PrintLambdaNat.$tcPrint1) -}
79ebdb986db5cfec46b1fd1c763726b6
  $tcPrint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
efea0af7755ce3c1587139288cdf85c7
  $tcPrint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$tcPrint3) -}
4bd0d91295258ccf4e14be88b8b2951e
  $tcPrint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Print"#) -}
3721e58dc8b0be38c2da907e62c337ce
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PrintLambdaNat.$trModule3
                   PrintLambdaNat.$trModule1) -}
94b84b53a5b691d9352db24ca3fa305e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$trModule2) -}
6775aad549f6a688e66f0497d270ccfc
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PrintLambdaNat"#) -}
3b44a0bc414f02d785b9e8042566d54f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PrintLambdaNat.$trModule4) -}
4480a8effe52ea83ae309d19a934c64a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LambdaNat-0.1.0.0-EvitBjaHhSP7BnBJ5PUt9C"#) -}
b5c70fa5098ce167d17bfb6b600b557d
  $w$cprt ::
    GHC.Types.Char
    -> [GHC.Show.ShowS] -> (# GHC.Show.ShowS, [GHC.Show.ShowS] #)
  {- Arity: 2, Strictness: <L,U(U)><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Char) (w1 :: [GHC.Show.ShowS]) ->
                 (# \ (x :: GHC.Base.String) ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      PrintLambdaNat.$fPrintChar9
                      (case w of wild { GHC.Types.C# x1 ->
                       case x1 of wild1 {
                         DEFAULT
                         -> GHC.Types.:
                              @ GHC.Types.Char
                              wild
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x)
                         '\t'#
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar7
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x)
                         '\n'#
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar5
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x)
                         '\''#
                         -> GHC.Types.:
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar4
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 wild
                                 (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x))
                         '\\'#
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              PrintLambdaNat.$fPrintChar2
                              (GHC.Types.: @ GHC.Types.Char PrintLambdaNat.$fPrintChar9 x) } }),
                    w1 #)) -}
246fe9ca1a926302cb9867bee311efba
  $w$cprt1 ::
    GHC.Prim.Int#
    -> AbsLambdaNat.Exp -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
f7bef8c04b21ff2b083db3c0b7d859a1
  $w$cprt2 ::
    GHC.Prim.Int#
    -> AbsLambdaNat.Exp -> [GHC.Show.ShowS] -> [GHC.Show.ShowS]
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: AbsLambdaNat.Exp)
                   (w :: [GHC.Show.ShowS]) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> PrintLambdaNat.$w$cprt1 0# ww1 w
                   1#
                   -> GHC.Types.:
                        @ GHC.Show.ShowS
                        PrintLambdaNat.$fPrintProgram3
                        (PrintLambdaNat.$w$cprt1
                           0#
                           ww1
                           (GHC.Types.:
                              @ GHC.Show.ShowS
                              PrintLambdaNat.$fPrintProgram1
                              w)) }) -}
1d28b3ceec49e91e5c3b7d27be649cf7
  $wmkEsc ::
    GHC.Prim.Char#
    -> GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Char#)
                   (ww1 :: GHC.Prim.Char#)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.eqChar# ww1 ww of lwild {
                   DEFAULT
                   -> case ww1 of ds {
                        DEFAULT -> GHC.Types.: @ GHC.Types.Char (GHC.Types.C# ds) w
                        '\t'# -> GHC.Base.++ @ GHC.Types.Char PrintLambdaNat.$fPrintChar7 w
                        '\n'# -> GHC.Base.++ @ GHC.Types.Char PrintLambdaNat.$fPrintChar5 w
                        '\\'#
                        -> GHC.Base.++ @ GHC.Types.Char PrintLambdaNat.$fPrintChar2 w }
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        PrintLambdaNat.$fPrintChar4
                        (GHC.Types.: @ GHC.Types.Char (GHC.Types.C# ww1) w) }) -}
f75115e0a132086410f32d4a0f00a37a
  $wreplicateS ::
    GHC.Prim.Int#
    -> GHC.Show.ShowS -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Show.ShowS)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> w1
                   1#
                   -> letrec {
                        $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char] -> [GHC.Types.Char]
                          {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [2] -}
                        = \ (ww1 :: GHC.Prim.Int#) (w2 :: [GHC.Types.Char]) ->
                          case ww1 of ds1 {
                            DEFAULT -> w ($wxs1 (GHC.Prim.-# ds1 1#) w2) 1# -> w w2 }
                      } in
                      $wxs1 ww w1 }) -}
1e112c1d54017f15354408f53340d4ee
  type Doc = [GHC.Show.ShowS] -> [GHC.Show.ShowS]
8d55988a435b956b51a713248a82c556
  class Print a where
    prt :: GHC.Types.Int -> a -> PrintLambdaNat.Doc
    prtList :: GHC.Types.Int -> [a] -> PrintLambdaNat.Doc
    {-# MINIMAL prt #-}
d3a5e3ffc08c7e605219ef99aa12448c
  concatD :: [PrintLambdaNat.Doc] -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
5bee25830e74e9bd13a7d35526dd0c20
  concatS :: [GHC.Show.ShowS] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
dd57c4f5c50e9753ad3c6c20cdebb0dc
  doc :: GHC.Show.ShowS -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ GHC.Show.ShowS) -}
684a036a50b0ef6cbded4d8bd4bb645d
  mkEsc :: GHC.Types.Char -> GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Types.Char)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 case w1 of ww2 { GHC.Types.C# ww3 ->
                 PrintLambdaNat.$wmkEsc ww1 ww3 w2 } }) -}
d76bc8acdb84937a6b0c77f6f3794e0f
  parenth :: PrintLambdaNat.Doc -> PrintLambdaNat.Doc
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ss :: PrintLambdaNat.Doc) (eta :: [GHC.Show.ShowS]) ->
                 GHC.Types.:
                   @ GHC.Show.ShowS
                   PrintLambdaNat.$fPrintProgram3
                   (ss
                      (GHC.Types.:
                         @ GHC.Show.ShowS
                         PrintLambdaNat.$fPrintProgram1
                         eta))) -}
47d2474d8d56cf11ebc00f2e2a7bff29
  prPrec ::
    GHC.Types.Int
    -> GHC.Types.Int -> PrintLambdaNat.Doc -> PrintLambdaNat.Doc
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (i :: GHC.Types.Int)
                   (j :: GHC.Types.Int)
                   (eta :: PrintLambdaNat.Doc) ->
                 case j of wild { GHC.Types.I# x ->
                 case i of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.<# x y of lwild {
                   DEFAULT -> eta 1# -> PrintLambdaNat.parenth eta } } }) -}
5408df1bffea53f1e2ee259110f98fc4
  printTree :: PrintLambdaNat.Print a => a -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(C1(U))),A)>,
     Unfolding: (\ @ a ($dPrint :: PrintLambdaNat.Print a) ->
                 let {
                   g :: a -> PrintLambdaNat.Doc
                   = PrintLambdaNat.prt @ a $dPrint PrintLambdaNat.printTree2
                 } in
                 \ (x :: a) ->
                 PrintLambdaNat.printTree_rend
                   PrintLambdaNat.printTree2
                   (GHC.Base.map
                      @ ([GHC.Types.Char] -> GHC.Base.String)
                      @ [GHC.Types.Char]
                      PrintLambdaNat.printTree1
                      (g x (GHC.Types.[] @ GHC.Show.ShowS)))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d53c7c8bb42c8d697dec7b4e71f388a6
  printTree1 ::
    ([GHC.Types.Char] -> GHC.Base.String) -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [GHC.Types.Char] -> GHC.Base.String) ->
                 ds (GHC.Types.[] @ GHC.Types.Char)) -}
ca47800b80581b23bc2a566220ffef37
  printTree2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6e996d04c95ec13a36dcd33adaa7eebf
  printTree_rend ::
    GHC.Types.Int
    -> [[GHC.Types.Char]] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><S,1*U><L,1*U> -}
b012b8a223cae37fe76ba97fa63c270b
  render :: PrintLambdaNat.Doc -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <C(S),1*C1(U)>,
     Unfolding: (\ (d :: PrintLambdaNat.Doc) ->
                 PrintLambdaNat.printTree_rend
                   PrintLambdaNat.printTree2
                   (GHC.Base.map
                      @ ([GHC.Types.Char] -> GHC.Base.String)
                      @ [GHC.Types.Char]
                      PrintLambdaNat.printTree1
                      (d (GHC.Types.[] @ GHC.Show.ShowS)))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49b5b123578bb5b9a913c292fe1e9e71
  replicateS :: GHC.Types.Int -> GHC.Show.ShowS -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Show.ShowS)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PrintLambdaNat.$wreplicateS ww1 w1 w2 }) -}
instance [safe] PrintLambdaNat.Print [GHC.Types.Char]
  = PrintLambdaNat.$fPrintChar
instance [safe] PrintLambdaNat.Print [GHC.Types.Double]
  = PrintLambdaNat.$fPrintDouble
instance [safe] PrintLambdaNat.Print [AbsLambdaNat.Exp]
  = PrintLambdaNat.$fPrintExp
instance [safe] PrintLambdaNat.Print [AbsLambdaNat.Id]
  = PrintLambdaNat.$fPrintId
instance [safe] PrintLambdaNat.Print [GHC.Integer.Type.Integer]
  = PrintLambdaNat.$fPrintInteger
instance [safe] PrintLambdaNat.Print [AbsLambdaNat.Program]
  = PrintLambdaNat.$fPrintProgram
instance [safe] PrintLambdaNat.Print [[]]
  = PrintLambdaNat.$fPrint[]
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

