
==================== FINAL INTERFACE ====================
2019-10-02 22:50:53.4052432 UTC

interface LambdaNat-0.1.0.0-EvitBjaHhSP7BnBJ5PUt9C:Interpreter [orphan module] 8064
  interface hash: 0584110b737e8282d56439796532d1a3
  ABI hash: 363f5512779e9dd12195726b5b9bd961
  export-list hash: 632474000dda8ccb04c15e98517dad80
  orphan hash: 00c49e312a350945ccf477da415e888c
  flag hash: 14384f4a8d7f461de2211a711161200e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Interpreter.efoldMap
  Interpreter.emap
  Interpreter.evalCBN
  Interpreter.execCBN
  Interpreter.fresh
  Interpreter.fresh_
  Interpreter.subst
  Interpreter.ID{Interpreter.ID unID}
  Interpreter.IDM{Interpreter.IDM unIDM}
module dependencies: AbsLambdaNat ErrM PrintLambdaNat
package dependencies: array-0.5.3.0 base-4.12.0.0
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 pretty-1.1.3.6 template-haskell-2.14.0.0
                      transformers-0.5.6.2 traverse-with-class-1.0.0.0
orphans: traverse-with-class-1.0.0.0:Data.Generics.Traversable.Instances
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Set.Internal
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
import  -/  AbsLambdaNat 04a76c481aadaee483d9743e82ab5ff6
  exports: dce3dbcb1796db0a7c2cc7d9c58b5d57
  EAbs 50acbaba9717770c7d78c2d05d4bd27c
  EApp cbafc0af3886455aafd8b0834b1a5391
  ECons 465741e75f669018b9cdb77825b5889a
  EFix ae8842ae31f10beb9ef109f282b97a9f
  EHd c500a92ed98a9e3a8f5c097ac9c11a5f
  EIf af8dc15618f09d04bffeaa04946dfb7f
  ELet c33dfc32c486672a86a3145ef086ed63
  EMinusOne b178edf2ab4d15bb095b366c6c66df61
  ENat0 ebb05270e8c3a0d38b8e1eb08f98a24b
  ENatS 10bbff1af592dd59b9cbfdbe90ddce83
  ENil ca08700cba7541c0e80ee1a5275656cc
  ERec c6aa78680aaae86272f2f31d686a99ab
  ETl b713211e2662a8c55c28edd8e72ee5ef
  EVar b571d194ff8d5f9f9d0bae44403364e3
  Exp 75dc4dd7f90173f13db2386bf021ccd3
  Id 6bf29625116d6b0a0ecbb7faeafe10fc
  Id 9607cd230e6ee57b357ee6334bb1cfae
  Prog 5aa67e399afe55920c1f04817ae4fa7f
  Program 589136324556dad1030302773e76c6fc
import  -/  ErrM 746d270a2e0d61a274cbfd30de8cf42c
  exports: 5df018d0238e03fcffb629f6e5868455
import  -/  PrintLambdaNat 1f9cf34164e2498e95557adce812935f
  exports: 458f7771442595c7d5779bffe945a49d
import  -/  base-4.12.0.0:Data.Data bd6f9484e4492e921cd91785f1f3f32c
import  -/  base-4.12.0.0:Data.Typeable 7895bbef2a54c6e075d73bac512c2b72
import  -/  base-4.12.0.0:Data.Typeable.Internal 25206d2a000f47a857c6f60c6b1f8b66
import  -/  base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import  -/  base-4.12.0.0:GHC.Num 009f4fca9200daff9e3ffbe2d7676a2f
import  -/  base-4.12.0.0:GHC.Show 48dce8b8129312101170e57c24f3ecbd
import  -/  base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import  -/  containers-0.6.0.1:Data.Map 26baed967f6b7a7e22b868215089f0e6
import  -/  containers-0.6.0.1:Data.Set 5e2df3d6b96ca95c2ba65f6b3e312f5d
import  -/  containers-0.6.0.1:Data.Set.Internal 40a7b1029de8ed3f7988ce210526b331
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  traverse-with-class-1.0.0.0:Data.Generics.Traversable 6a9d0ab1ab32bd6b0adf49513637d24c
1a3b090b7033b5d9eb68c6c789788a54
  $cId :: Data.Data.Constr
  {- Strictness: m -}
bc15c0e5505ae3b7fb0485ee6cfed27c
  $fDataExp :: Data.Data.Data AbsLambdaNat.Exp
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Exp
                  Interpreter.$fDataExp51
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <AbsLambdaNat.Exp>_N)
                  Interpreter.$fDataExp_$cgfoldl
                  Interpreter.$fDataExp_$cgunfold
                  Interpreter.$fDataExp_$ctoConstr
                  Interpreter.$fDataExp_$cdataTypeOf
                  Interpreter.$fDataExp_$cdataCast1
                  Interpreter.$fDataExp_$cdataCast2
                  Interpreter.$fDataExp7
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <AbsLambdaNat.Exp>_R
                   ->_R Data.Functor.Identity.N:Identity[0] <AbsLambdaNat.Exp>_R)
                  Interpreter.$fDataExp6
                    `cast`
                  (forall (r :: <*>_N) (r' :: <*>_N).
                   <r -> r' -> r>_R
                   ->_R <r>_R
                   ->_R <forall d. Data.Data.Data d => d -> r'>_R
                   ->_R <AbsLambdaNat.Exp>_R
                   ->_R Data.Functor.Const.N:Const[0]
                            <*>_N <r>_R <AbsLambdaNat.Exp>_P)
                  Interpreter.$fDataExp_$cgmapQr
                  Interpreter.$fDataExp_$cgmapQ
                  Interpreter.$fDataExp_$cgmapQi
                  Interpreter.$fDataExp_$cgmapM
                  Interpreter.$fDataExp_$cgmapMp
                  Interpreter.$fDataExp_$cgmapMo -}
0050ea0456ef4264740590e32d670b90
  $fDataExp1 :: g -> Data.Data.Qi u g
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ u @ g (ds :: g) -> Interpreter.$fDataExp2 @ u @ g) -}
05a1d84fe753d87353357dfbab368610
  $fDataExp10 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp11) -}
d60388e61857483f957da7ce4fa18a21
  $fDataExp11 :: Data.Data.ConIndex
84e56ded620f15c475dd6d7b6d2199fa
  $fDataExp12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EVar"#) -}
37bc33df8709b57a2706b6793d7d07b8
  $fDataExp13 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp14) -}
ac81651ad85abe74f496dfdf45838f42
  $fDataExp14 :: Data.Data.ConIndex
d27e3f1bfd37a1d1413a0f70eb069ff5
  $fDataExp15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ENatS"#) -}
c5c84ac4d8605e64e784d72da240c3f1
  $fDataExp16 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp17) -}
9f5d7fb7e4a3b80fe48cf6c3959f4c69
  $fDataExp17 :: Data.Data.ConIndex
076ca499a0a571ae5e00c49ffe675ad8
  $fDataExp18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ENat0"#) -}
8df7e6202d24847fce5f99aa2bf125d0
  $fDataExp19 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp20) -}
cfa595dd592e3c29aa765933a6f2340a
  $fDataExp2 :: Data.Data.Qi u g
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ u @ g ->
                 Data.Data.Qi
                   @ *
                   @ u
                   @ g
                   Interpreter.$fDataExp3
                   (GHC.Maybe.Nothing @ u)) -}
2bf5eec1b5d8a8bb0cfd8463d14dabac
  $fDataExp20 :: Data.Data.ConIndex
b2525eb9bc17463154d9783d0a2181d8
  $fDataExp21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ECons"#) -}
f6739a56175782002337233125993129
  $fDataExp22 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp23) -}
03692e10f6eea13c351ca9fb7a08a225
  $fDataExp23 :: Data.Data.ConIndex
96c375dadb9c4cf3ff5ca41f9f8f8d43
  $fDataExp24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ENil"#) -}
3ce45dbcf84dae4adc22036ef4abcafa
  $fDataExp25 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp26) -}
a16a26f1492658f7040fce3b9ceb823a
  $fDataExp26 :: Data.Data.ConIndex
beae605bf206ec0649bab2cfca1c350a
  $fDataExp27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EApp"#) -}
3c2207ecb4b37344770d5aa5c20aa3ea
  $fDataExp28 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp29) -}
ef199bd8edc43dcfe41aeaa96881875d
  $fDataExp29 :: Data.Data.ConIndex
35420e4660493af5a4ba6177e3ccaf2e
  $fDataExp3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
f07954ab4301d3301cd9467a4a7f755f
  $fDataExp30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EMinusOne"#) -}
75b30e5677ae86af8ef6a8fe4566dd5d
  $fDataExp31 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp32) -}
8e1f0a2d7d6a3272ae73f22288493bfc
  $fDataExp32 :: Data.Data.ConIndex
321ea718b6d403abc2af711a4daddacc
  $fDataExp33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ETl"#) -}
178df95ee6f6f844cc765ddb8b3da7d5
  $fDataExp34 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp35) -}
389b54f27fa61cb195f79c408e41bb29
  $fDataExp35 :: Data.Data.ConIndex
e36c825f1ea8b49e9b2fd528825d901b
  $fDataExp36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EHd"#) -}
35a2828c7eef075e572d7f2912d89628
  $fDataExp37 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp38) -}
9ba6f6e309f9fff0e02528bf4559ea01
  $fDataExp38 :: Data.Data.ConIndex
3879951e926cbe90bdaa24bf3557b1b4
  $fDataExp39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ERec"#) -}
c36480c204359c10a7b4a39eb6589d05
  $fDataExp4 :: g -> [u] -> [u]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ u @ g (ds :: g) (eta :: [u]) -> eta) -}
93931db8fefb6d9f764fa825ffc790a0
  $fDataExp40 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp41) -}
8d53a1135417fd1dcc44886d3f904a93
  $fDataExp41 :: Data.Data.ConIndex
77246b07b7e67161f417db8784616e49
  $fDataExp42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ELet"#) -}
c1c6898695ebf9a4dbd7fcfabca0f592
  $fDataExp43 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp44) -}
0e56ff59ba8f63c316c897a0ef1c5070
  $fDataExp44 :: Data.Data.ConIndex
e3314f23b4f5f4aea665887b841897a1
  $fDataExp45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EIf"#) -}
9aa6bfe7b2ccf6fe39505172e266c5a7
  $fDataExp46 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp47) -}
270b70ba9d8240c1302e6cb629463db2
  $fDataExp47 :: Data.Data.ConIndex
9c2754021a49651baf2c72a1efb9055b
  $fDataExp48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EAbs"#) -}
a31e9cfe4e9f6c5d729c893e99bd6d75
  $fDataExp49 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp50) -}
d1269016ea4b2be841bdf54cbd80b764
  $fDataExp5 :: g -> r -> r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r @ g (ds :: g) (eta :: r) -> eta) -}
feb7ace3ca1a50e833cf7725e94a45c3
  $fDataExp50 :: Data.Data.ConIndex
142a370b372b33c984c66db0d8031b8d
  $fDataExp51 :: Data.Typeable.Internal.TypeRep AbsLambdaNat.Exp
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ AbsLambdaNat.Exp
                        1605475627967446372##
                        8862844730032226755##
                        AbsLambdaNat.$trModule
                        AbsLambdaNat.$tcExp1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ AbsLambdaNat.Exp
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
b5ca244cc9b22a37a0059269163eaac6
  $fDataExp6 ::
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Exp
    -> Data.Functor.Const.Const r AbsLambdaNat.Exp
  {- Arity: 4, Strictness: <L,C(C1(U))><L,1*U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (eta :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ (Data.Functor.Const.Const r)
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: Data.Functor.Const.Const r (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds
                      c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                      (ds2 @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Const.Const r (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                   (\ @ g1 (ds3 :: g1)[OneShot] -> ds1)
                     `cast`
                   (forall (g1 :: <*>_N).
                    <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                   eta) -}
bb0171210097b6580a81a7b82f732bc5
  $fDataExp7 ::
    (forall b. Data.Data.Data b => b -> b)
    -> AbsLambdaNat.Exp
    -> Data.Functor.Identity.Identity AbsLambdaNat.Exp
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Interpreter.$fDataExp8
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
515c0530d27c1d80a8013d758a7bf91e
  $fDataExp8 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a (v :: a) -> v) -}
bdbc3a49f881dc219c6f53df00c9c33a
  $fDataExp9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EFix"#) -}
892d17e7cb204e189a39dda35cfaacc1
  $fDataExp_$cdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Exp)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Exp)) -}
a0a7a6c9d8de958be7854b6324c84f67
  $fDataExp_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Exp)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d e.
                          (Data.Data.Data d, Data.Data.Data e) =>
                          c (t d e)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Exp)) -}
906551ae0be7560e16fae5b8296655c1
  $fDataExp_$cdataTypeOf :: AbsLambdaNat.Exp -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AbsLambdaNat.Exp) -> Interpreter.$tExp) -}
5998f19044ae1ced52b4c9d7c39ca3ee
  $fDataExp_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> AbsLambdaNat.Exp -> c AbsLambdaNat.Exp
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><L,1*C1(U)><S,1*U> -}
2fd1ddbda65bb7e94a1ec79669416e7c
  $fDataExp_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp -> m AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    let {
                      lvl11 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl11
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)
                   eta) -}
9a66705c8e3dd0ddf6bcbb2f014bb3af
  $fDataExp_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp -> m AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Exp) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMo @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
41fe7ac029b6ac4975eca958d9b6ff82
  $fDataExp_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp -> m AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Exp) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMp @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
fd576a537de8d2182463543c10cd2b80
  $fDataExp_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Exp -> [u]
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: AbsLambdaNat.Exp) ->
                 (Interpreter.$fDataExp_$cgfoldl
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Interpreter.$fDataExp4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0] <*>_N <[u]>_R <AbsLambdaNat.Exp>_P)
                   (GHC.Types.[] @ u)) -}
2e5e1e80ed9f92342d44c84283381c68
  $fDataExp_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Exp -> u
  {- Arity: 3, Strictness: <L,U(U)><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: AbsLambdaNat.Exp) ->
                 case Interpreter.$fDataExp_$cgfoldl
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))[OneShot]
                           (a1 :: d)[OneShot] ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.==# x1 y of lwild {
                              DEFAULT -> q
                              1# -> GHC.Maybe.Just @ u (ds1 @ d $dData1 a1) } } }) })
                        (Interpreter.$fDataExp1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
d8e3224540b2140d9b14e8b22b11beaf
  $fDataExp_$cgmapQr ::
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Exp
    -> r
  {- Arity: 4, Strictness: <L,C(C1(U))><L,U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: AbsLambdaNat.Exp) ->
                 (Interpreter.$fDataExp_$cgfoldl
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Interpreter.$fDataExp5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0] <*>_N <r>_R <AbsLambdaNat.Exp>_P)
                   ds1) -}
1653cfa027b038aabae467b292fbbc07
  $fDataExp_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <L,C(C1(U))><L,1*C1(U)><S(SLLLL),1*U(1*U,A,A,A,1*U(1*U,A))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ c :: * -> *
                   (w :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (w1 :: forall r. r -> c r)
                   (w2 :: Data.Data.Constr) ->
                 case w2 of ww { Data.Data.Constr ww1 ww2 ww3 ww4 ww5 ->
                 Interpreter.$w$cgunfold @ c w w1 ww1 ww5 }) -}
62f3f7b1444a8885dfd6e773b84f351a
  $fDataExp_$ctoConstr :: AbsLambdaNat.Exp -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: AbsLambdaNat.Exp) ->
                 case w of wild {
                   AbsLambdaNat.EAbs ds ds1
                   -> Data.Data.Constr
                        Interpreter.$fDataExp49
                        Interpreter.$fDataExp_w14
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EIf ds ds1 ds2 ds3
                   -> Data.Data.Constr
                        Interpreter.$fDataExp46
                        Interpreter.$fDataExp_w13
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ELet ds ds1 ds2
                   -> Data.Data.Constr
                        Interpreter.$fDataExp43
                        Interpreter.$fDataExp_w12
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ERec ds ds1 ds2
                   -> Data.Data.Constr
                        Interpreter.$fDataExp40
                        Interpreter.$fDataExp_w11
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EHd ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp37
                        Interpreter.$fDataExp_w10
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ETl ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp34
                        Interpreter.$fDataExp_w9
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EMinusOne ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp31
                        Interpreter.$fDataExp_w8
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EApp ds ds1
                   -> Data.Data.Constr
                        Interpreter.$fDataExp28
                        Interpreter.$fDataExp_w7
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ENil
                   -> Data.Data.Constr
                        Interpreter.$fDataExp25
                        Interpreter.$fDataExp_w6
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ECons ds ds1
                   -> Data.Data.Constr
                        Interpreter.$fDataExp22
                        Interpreter.$fDataExp_w5
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ENat0
                   -> Data.Data.Constr
                        Interpreter.$fDataExp19
                        Interpreter.$fDataExp_w4
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ENatS ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp16
                        Interpreter.$fDataExp_w3
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EVar ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp13
                        Interpreter.$fDataExp_w2
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EFix ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp10
                        Interpreter.$fDataExp_w1
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp }) -}
ca340d9fd3e7cee4fe824dd2beeb052a
  $fDataExp_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp9) -}
b4bb8be5be4e8a505474d3dc1a1895ae
  $fDataExp_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp36) -}
b0d6f9c5849b2a484771cfcc93587c0c
  $fDataExp_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp39) -}
661168f6866da6def3d006b7a6a5777e
  $fDataExp_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp42) -}
2cf8cb00d78fd9dd8d1496dc46e319da
  $fDataExp_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp45) -}
c4b46c28a39483790d20c8d0d7ad6823
  $fDataExp_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp48) -}
c42afcc6083363b495cc07a1d2445e91
  $fDataExp_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp12) -}
1b19ea7f487197066c27d9c370bbbd47
  $fDataExp_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp15) -}
e9c1f10e55b88fbf0bec2e477b8b8e1e
  $fDataExp_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp18) -}
1e08245ee0ecf066d5aecbcb851195f1
  $fDataExp_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp21) -}
7f3da3a93ce8743a4dfd7f18c83811a0
  $fDataExp_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp24) -}
6172012163b2a3dd66efba86995e37ab
  $fDataExp_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp27) -}
f0afdba3c21d57f3a9d4716d7d986288
  $fDataExp_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp30) -}
112a38239f1447b4ba46c87b8f85725f
  $fDataExp_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp33) -}
fc19013e086d95000742ca42daaf1d46
  $fDataId :: Data.Data.Data AbsLambdaNat.Id
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Id
                  Interpreter.$fDataId7
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <AbsLambdaNat.Id>_N)
                  Interpreter.$fDataId_$cgfoldl
                  Interpreter.$fDataId_$cgunfold
                  Interpreter.$fDataId_$ctoConstr
                  Interpreter.$fDataId_$cdataTypeOf
                  Interpreter.$fDataId_$cdataCast1
                  Interpreter.$fDataId_$cdataCast2
                  Interpreter.$fDataId3
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <AbsLambdaNat.Id>_R
                   ->_R Sym (AbsLambdaNat.N:Id[0]))
                  Interpreter.$fDataId_$cgmapQl
                  Interpreter.$fDataId_$cgmapQr
                  Interpreter.$fDataId_$cgmapQ
                  Interpreter.$fDataId_$cgmapQi
                  Interpreter.$fDataId_$cgmapM
                  Interpreter.$fDataId_$cgmapMp
                  Interpreter.$fDataId_$cgmapMo -}
3250e779a1aa74e6490f833daa03330e
  $fDataId1 :: (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Interpreter.$fDataId2
                    `cast`
                  (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])),
                  GHC.Types.False)) -}
f5e26a4b75a9fdd83990df5ee94af84d
  $fDataId2 :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: GHC.Base.String) -> v) -}
2ed790bee07edf5be1a455bf624cfc22
  $fDataId3 ::
    (forall b. Data.Data.Data b => b -> b)
    -> AbsLambdaNat.Id -> GHC.Base.String
  {- Arity: 2, Strictness: <C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: AbsLambdaNat.Id) ->
                 ds
                   @ GHC.Base.String
                   Data.Data.$fData[]_$s$fData[]
                   x0 `cast` (AbsLambdaNat.N:Id[0])) -}
7becae2e877b2cfdf54d75c1c48b8ae1
  $fDataId4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep Interpreter.$fDataId5) -}
56837f0059f4b7a2f151f0f5de90578d
  $fDataId5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Interpreter.$cId
                   (GHC.Types.[] @ Data.Data.Constr)) -}
7e9abd5e4f0b227a128b5edfbd10d54b
  $fDataId6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id"#) -}
cd015a7491be5d5bc95d9711e75237f2
  $fDataId7 :: Data.Typeable.Internal.TypeRep AbsLambdaNat.Id
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ AbsLambdaNat.Id
                        8603591178509815823##
                        3874963637049073567##
                        AbsLambdaNat.$trModule
                        AbsLambdaNat.$tcId1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ AbsLambdaNat.Id
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
1784f104eec3ba68aee9c6d93844c7a3
  $fDataId_$cdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Id)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Id)) -}
ad80481eb940ecde716f124b7e490031
  $fDataId_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Id)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d e.
                          (Data.Data.Data d, Data.Data.Data e) =>
                          c (t d e)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Id)) -}
8f394f0cd931bda99398ccf0ca67630a
  $fDataId_$cdataTypeOf :: AbsLambdaNat.Id -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AbsLambdaNat.Id) -> Interpreter.$tId) -}
77b903cde9cfb54a12508683696901ec
  $fDataId_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> AbsLambdaNat.Id -> c AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c :: * -> *
                   (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: AbsLambdaNat.Id) ->
                 k @ GHC.Base.String
                   @ AbsLambdaNat.Id
                   Data.Data.$fData[]_$s$fData[]
                   (z @ (GHC.Base.String -> AbsLambdaNat.Id)
                      Interpreter.$fDataId2
                        `cast`
                      (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])))
                   ds `cast` (AbsLambdaNat.N:Id[0])) -}
41f982433e3c10de1c68759b730ed86c
  $fDataId_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id -> m AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLL),1*U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Id) ->
                 case w of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 Interpreter.$w$cgmapM @ m ww2 ww4 w1 w2 }) -}
e0d1c8cbef3b72d7817437a712eed82f
  $fDataId_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id -> m AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Id) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMo1 @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
ef2ce3925b6ccf055d500472fe05f390
  $fDataId_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id -> m AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Id) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMp1 @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
d925af28863b05c4bf7f4452b1199333
  $fDataId_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Id -> [u]
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: AbsLambdaNat.Id) ->
                 GHC.Types.:
                   @ u
                   (ds
                      @ GHC.Base.String
                      Data.Data.$fData[]_$s$fData[]
                      x0 `cast` (AbsLambdaNat.N:Id[0]))
                   (GHC.Types.[] @ u)) -}
54bafcd644525e25224f8c4855255313
  $fDataId_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Id -> u
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: AbsLambdaNat.Id) ->
                 case ds of wild { GHC.Types.I# x1 ->
                 case x1 of wild1 {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0#
                   -> ds1
                        @ GHC.Base.String
                        Data.Data.$fData[]_$s$fData[]
                        x `cast` (AbsLambdaNat.N:Id[0]) } }) -}
6502a2d08ccc5528c4166a5ad795aa13
  $fDataId_$cgmapQl ::
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Id
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (eta :: AbsLambdaNat.Id) ->
                 ds
                   ds1
                   (ds2
                      @ GHC.Base.String
                      Data.Data.$fData[]_$s$fData[]
                      eta `cast` (AbsLambdaNat.N:Id[0]))) -}
e91ea41d218fadf149fa8a6b030eaaf5
  $fDataId_$cgmapQr ::
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Id
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: AbsLambdaNat.Id) ->
                 ds
                   (ds2
                      @ GHC.Base.String
                      Data.Data.$fData[]_$s$fData[]
                      x0 `cast` (AbsLambdaNat.N:Id[0]))
                   ds1) -}
22d5f5912d2c8119a5187177a5dd52c0
  $fDataId_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c AbsLambdaNat.Id
  {- Arity: 3, Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c :: * -> *
                   (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ GHC.Base.String
                   @ AbsLambdaNat.Id
                   Data.Data.$fData[]_$s$fData[]
                   (z @ (GHC.Base.String -> AbsLambdaNat.Id)
                      Interpreter.$fDataId2
                        `cast`
                      (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])))) -}
bc14f72245ba836eb07aa0853f6ad1e3
  $fDataId_$ctoConstr :: AbsLambdaNat.Id -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AbsLambdaNat.Id) -> Interpreter.$cId) -}
cb64c339e9e6c8c6fb9f2a458e1cb5cf
  $fDataId_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Interpreter.$fDataId6) -}
05ce19266394392a5da3df4ad35e5f49
  $sfromList ::
    [GHC.Base.String] -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Base.String
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ GHC.Base.String
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Base.String)
                             (Data.Set.Internal.Tip @ GHC.Base.String) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 x ipv of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Interpreter.$sfromList_go
                                  wild1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ GHC.Base.String)
                                     (Data.Set.Internal.Tip @ GHC.Base.String)) }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Interpreter.$wgo3
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ GHC.Base.String)
                                     (Data.Set.Internal.Tip @ GHC.Base.String))
                                  wild1 } } } }) -}
d74f01adf3d8ecce1b7000a81b0bbd57
  $sfromList_go ::
    [GHC.Base.String]
    -> Data.Set.Internal.Set GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bcbde6fa1141019b773d3d15f61b90f3
  $sinsert_$sgo3 ::
    GHC.Base.String
    -> GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
9bfd6a56a915474fcb24e5d320479853
  $smember_go3 ::
    GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
9ca75e55d52abcf6aed5a2cf9d5f8f52
  $tExp :: Data.Data.DataType
  {- Strictness: m -}
22c8884fb6f36567bd16ee6e08a83907
  $tId :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Interpreter.$fDataId_w1
                   Interpreter.$fDataId4) -}
1af46a41770e5bdec45d3430b93941a0
  $tc'ID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7699714521074555186##
                   12280731199757206511##
                   Interpreter.$trModule
                   Interpreter.$tc'ID2
                   1#
                   Interpreter.$tc'ID1) -}
585b9515c81c08a04eefe05276eb6178
  $tc'ID1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7b9cade172da0fd238c239cdcc899cf9
  $tc'ID2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tc'ID3) -}
c0adc0bba8278c9bc5cba070ede05a57
  $tc'ID3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ID"#) -}
2ae050aa3e59615ea64025634b2dfe13
  $tc'IDM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1205458263077402662##
                   17199815335841970352##
                   Interpreter.$trModule
                   Interpreter.$tc'IDM2
                   2#
                   Interpreter.$tc'IDM1) -}
d21dc09a08ef355502335b8369206b73
  $tc'IDM1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6b16aced09524ee75d44473104148de5
  $tc'IDM2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tc'IDM3) -}
fa4d4d2eb7723d265175dbe2deec81e2
  $tc'IDM3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IDM"#) -}
88e8fadc95d1edd1bb91ad9ebca48b57
  $tcID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6974190023953177952##
                   3840803129183993872##
                   Interpreter.$trModule
                   Interpreter.$tcID1
                   0#
                   GHC.Types.krep$*Arr*) -}
ccdbce8002a88ba2439fa400f5958103
  $tcID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tcID2) -}
32af5b37dbe600a05dea3ff0592c8c6c
  $tcID2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ID"#) -}
c30fd763b36df4587b64ad29e99b3ae3
  $tcIDM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8293997775599258939##
                   3570769677242903747##
                   Interpreter.$trModule
                   Interpreter.$tcIDM1
                   0#
                   GHC.Types.krep$*->*->*) -}
900dc1b61511f41b6b52db76646c28aa
  $tcIDM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tcIDM2) -}
822b275ba4d19855b9e0e1722b29d6b5
  $tcIDM2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IDM"#) -}
2e9443b6416f152d81d2e6e526ce4cf4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Interpreter.$trModule3
                   Interpreter.$trModule1) -}
b22feb300149af3e2b00b60e4a8dbe47
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$trModule2) -}
99eb26bc3cf945fec920eb3686e71f98
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Interpreter"#) -}
75f8b0ef8d256b06572e9deb847df112
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$trModule4) -}
ea5873afa4b110b507bab7637ce0e2b0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LambdaNat-0.1.0.0-EvitBjaHhSP7BnBJ5PUt9C"#) -}
5e4d625670620c5572cb0a4218f9dbb6
  $w$cgmapM ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id
    -> m AbsLambdaNat.Id
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Id) ->
                 let {
                   lvl11 :: m GHC.Base.String
                   = w @ GHC.Base.String
                       Data.Data.$fData[]_$s$fData[]
                       w1 `cast` (AbsLambdaNat.N:Id[0])
                 } in
                 ww
                   @ (GHC.Base.String -> AbsLambdaNat.Id)
                   @ AbsLambdaNat.Id
                   (ww1
                      @ (GHC.Base.String -> AbsLambdaNat.Id)
                      Interpreter.$fDataId2
                        `cast`
                      (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])))
                   (\ (c' :: GHC.Base.String -> AbsLambdaNat.Id) ->
                    ww
                      @ GHC.Base.String
                      @ AbsLambdaNat.Id
                      lvl11
                      (\ (x' :: GHC.Base.String) -> ww1 @ AbsLambdaNat.Id (c' x')))) -}
7045f883bca4fb94b04335a1a1f91476
  $w$cgmapMo ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp
    -> m AbsLambdaNat.Exp
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Exp) ->
                 ww
                   @ (AbsLambdaNat.Exp, GHC.Types.Bool)
                   @ AbsLambdaNat.Exp
                   (Interpreter.$fDataExp_$cgfoldl
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl11 :: m d = w @ d $dData1 y
                       } in
                       ww
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds1 :: (d -> b, GHC.Types.Bool)) ->
                          case ds1 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> ww3
                                 @ (b, GHC.Types.Bool)
                                 (ww
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl11
                                    (\ (y' :: d) ->
                                     ww1 @ (b, GHC.Types.Bool) (h y', GHC.Types.True)))
                                 (ww1 @ (b, GHC.Types.Bool) (h y, GHC.Types.False))
                            GHC.Types.True
                            -> ww1 @ (b, GHC.Types.Bool) (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       ww1 @ (g, GHC.Types.Bool) (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      w1)
                     `cast`
                   (Data.Data.N:Mp[0] <m>_R <AbsLambdaNat.Exp>_N)
                   (\ (ds :: (AbsLambdaNat.Exp, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Exp
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Exp x' } })) -}
2e356d14a4bd62f180f55fef156603b0
  $w$cgmapMo1 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id
    -> m AbsLambdaNat.Id
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Id) ->
                 ww
                   @ (AbsLambdaNat.Id, GHC.Types.Bool)
                   @ AbsLambdaNat.Id
                   (let {
                      lvl11 :: m GHC.Base.String
                      = w @ GHC.Base.String
                          Data.Data.$fData[]_$s$fData[]
                          w1 `cast` (AbsLambdaNat.N:Id[0])
                    } in
                    ww
                      @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                      @ (AbsLambdaNat.Id, GHC.Types.Bool)
                      (ww1
                         @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                         Interpreter.$fDataId1)
                      (\ (ds1 :: (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)) ->
                       case ds1 of wild { (,) h b1 ->
                       case b1 of wild1 {
                         GHC.Types.False
                         -> ww3
                              @ (AbsLambdaNat.Id, GHC.Types.Bool)
                              (ww
                                 @ GHC.Base.String
                                 @ (AbsLambdaNat.Id, GHC.Types.Bool)
                                 lvl11
                                 (\ (y' :: GHC.Base.String) ->
                                  ww1 @ (AbsLambdaNat.Id, GHC.Types.Bool) (h y', GHC.Types.True)))
                              (ww1
                                 @ (AbsLambdaNat.Id, GHC.Types.Bool)
                                 (h w1 `cast` (AbsLambdaNat.N:Id[0]), GHC.Types.False))
                         GHC.Types.True
                         -> ww1
                              @ (AbsLambdaNat.Id, GHC.Types.Bool)
                              (h w1 `cast` (AbsLambdaNat.N:Id[0]), GHC.Types.True) } }))
                   (\ (ds :: (AbsLambdaNat.Id, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Id
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Id x' } })) -}
4f30e49b0d791b98b67ab0f950d0d3b5
  $w$cgmapMp ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp
    -> m AbsLambdaNat.Exp
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Exp) ->
                 ww
                   @ (AbsLambdaNat.Exp, GHC.Types.Bool)
                   @ AbsLambdaNat.Exp
                   (Interpreter.$fDataExp_$cgfoldl
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl11 :: m d = w @ d $dData1 y
                       } in
                       ww
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds1 :: (d -> b, GHC.Types.Bool)) ->
                          case ds1 of wild { (,) h b1 ->
                          ww3
                            @ (b, GHC.Types.Bool)
                            (ww
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl11
                               (\ (y' :: d) -> ww1 @ (b, GHC.Types.Bool) (h y', GHC.Types.True)))
                            (ww1 @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       ww1 @ (g, GHC.Types.Bool) (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      w1)
                     `cast`
                   (Data.Data.N:Mp[0] <m>_R <AbsLambdaNat.Exp>_N)
                   (\ (ds :: (AbsLambdaNat.Exp, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Exp
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Exp x' } })) -}
7a2c3121bfeecf61176851f61f73a03b
  $w$cgmapMp1 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id
    -> m AbsLambdaNat.Id
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Id) ->
                 ww
                   @ (AbsLambdaNat.Id, GHC.Types.Bool)
                   @ AbsLambdaNat.Id
                   (let {
                      lvl11 :: m GHC.Base.String
                      = w @ GHC.Base.String
                          Data.Data.$fData[]_$s$fData[]
                          w1 `cast` (AbsLambdaNat.N:Id[0])
                    } in
                    ww
                      @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                      @ (AbsLambdaNat.Id, GHC.Types.Bool)
                      (ww1
                         @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                         Interpreter.$fDataId1)
                      (\ (ds1 :: (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)) ->
                       case ds1 of wild { (,) h b1 ->
                       ww3
                         @ (AbsLambdaNat.Id, GHC.Types.Bool)
                         (ww
                            @ GHC.Base.String
                            @ (AbsLambdaNat.Id, GHC.Types.Bool)
                            lvl11
                            (\ (y' :: GHC.Base.String) ->
                             ww1 @ (AbsLambdaNat.Id, GHC.Types.Bool) (h y', GHC.Types.True)))
                         (ww1
                            @ (AbsLambdaNat.Id, GHC.Types.Bool)
                            (h w1 `cast` (AbsLambdaNat.N:Id[0]), b1)) }))
                   (\ (ds :: (AbsLambdaNat.Id, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Id
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Id x' } })) -}
353851b63a85372d6d5a0586357f6e64
  $w$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.ConstrRep
    -> Data.Data.DataType
    -> c AbsLambdaNat.Exp
  {- Arity: 4,
     Strictness: <L,C(C1(U))><L,1*C1(U)><S,1*U><L,1*U(1*U,A)>,
     Inline: [2] -}
193700ad12785a2e3728f11b2b60a04a
  $wefoldMap ::
    Data.Typeable.Internal.Typeable a =>
    (forall (c :: * -> *).
     (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
     -> (forall g. g -> c g) -> a -> c a)
    -> GHC.Base.Monoid m => (a -> m) -> a -> m
  {- Arity: 5,
     Strictness: <L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,U(1*U(C(C1(U)),A,A),1*U,A,A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ m
                   (ww :: Data.Typeable.Internal.Typeable a)
                   (ww1 :: forall (c :: * -> *).
                           (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                           -> (forall g. g -> c g) -> a -> c a)
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a -> m)
                   (w2 :: a) ->
                 let {
                   lvl11 :: m = GHC.Base.mempty @ m w
                 } in
                 let {
                   $dSemigroup :: GHC.Base.Semigroup m = GHC.Base.$p1Monoid @ m w
                 } in
                 (ww1
                    @ (Interpreter.IDM m)
                    (\ @ d
                       @ b
                       ($dData :: Data.Data.Data d)
                       (eta :: Interpreter.IDM m (d -> b))
                       (eta1 :: d) ->
                     case Data.Typeable.Internal.sameTypeRep
                            @ *
                            @ *
                            @ d
                            @ a
                            (Data.Data.$p1Data @ d $dData)
                              `cast`
                            (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N)
                            ww
                              `cast`
                            (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild {
                       GHC.Types.False
                       -> eta
                            `cast`
                          (Interpreter.N:IDM[0] <m>_R <d -> b>_P ; Sym (Interpreter.N:IDM[0]
                                                                            <m>_R <b>_P))
                       GHC.Types.True
                       -> (GHC.Base.<>
                             @ m
                             $dSemigroup
                             eta `cast` (Interpreter.N:IDM[0] <m>_R <d -> b>_P)
                             (w1 eta1 `cast` (UnsafeCo representational d a)))
                            `cast`
                          (Sym (Interpreter.N:IDM[0] <m>_R <b>_P)) })
                    (\ @ g (ds :: g) -> lvl11)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Interpreter.N:IDM[0] <m>_R <g>_P))
                    w2)
                   `cast`
                 (Interpreter.N:IDM[0] <m>_R <a>_P)) -}
71608f2131300f5bb5593bb6a6243b7c
  $wemap ::
    Data.Typeable.Internal.Typeable a =>
    (forall (c :: * -> *).
     (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
     -> (forall g. g -> c g) -> a -> c a)
    -> (a -> a) -> a -> a
  {- Arity: 4,
     Strictness: <L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (ww :: Data.Typeable.Internal.Typeable a)
                   (ww1 :: forall (c :: * -> *).
                           (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                           -> (forall g. g -> c g) -> a -> c a)
                   (w :: a -> a)
                   (w1 :: a) ->
                 let {
                   lvl11 :: GHC.Fingerprint.Type.Fingerprint
                   = GHC.Magic.noinline
                       @ ([GHC.Fingerprint.Type.Fingerprint]
                          -> GHC.Fingerprint.Type.Fingerprint)
                       GHC.Fingerprint.fingerprintFingerprints
                       (GHC.Types.:
                          @ GHC.Fingerprint.Type.Fingerprint
                          (Data.Typeable.Internal.typeRepFingerprint
                             @ *
                             @ a
                             ww `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                          (GHC.Types.:
                             @ GHC.Fingerprint.Type.Fingerprint
                             (Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                ww `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                             (GHC.Types.[] @ GHC.Fingerprint.Type.Fingerprint)))
                 } in
                 (ww1
                    @ Interpreter.ID
                    (\ @ d
                       @ b
                       ($dData :: Data.Data.Data d)
                       (eta :: Interpreter.ID (d -> b))
                       (eta1 :: d) ->
                     case lvl11 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case ww
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     let {
                       $dTypeable :: Data.Typeable.Internal.Typeable d
                       = Data.Data.$p1Data @ d $dData
                     } in
                     case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ d
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                               (GHC.Types.:
                                  @ GHC.Fingerprint.Type.Fingerprint
                                  (Data.Typeable.Internal.typeRepFingerprint
                                     @ *
                                     @ d
                                     $dTypeable
                                       `cast`
                                     (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                                  (GHC.Types.[]
                                     @ GHC.Fingerprint.Type.Fingerprint))) of dt4 { GHC.Fingerprint.Type.Fingerprint dt5 dt6 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N) of dt7 { DEFAULT ->
                     case GHC.Prim.eqWord# dt1 dt5 of lwild {
                       DEFAULT
                       -> (eta `cast` (Interpreter.N:ID[0] <d -> b>_R) eta1)
                            `cast`
                          (Sym (Interpreter.N:ID[0] <b>_R))
                       1#
                       -> case GHC.Prim.eqWord# dt2 dt6 of lwild1 {
                            DEFAULT
                            -> (eta `cast` (Interpreter.N:ID[0] <d -> b>_R) eta1)
                                 `cast`
                               (Sym (Interpreter.N:ID[0] <b>_R))
                            1#
                            -> (eta `cast` (Interpreter.N:ID[0] <d -> b>_R)
                                  (w eta1 `cast` (UnsafeCo representational d a))
                                    `cast`
                                  (UnsafeCo representational a d))
                                 `cast`
                               (Sym (Interpreter.N:ID[0] <b>_R)) } } } } } })
                    Interpreter.$fDataExp8
                      `cast`
                    (forall (a1 :: <*>_N).
                     <a1>_R ->_R Sym (Interpreter.N:ID[0] <a1>_R))
                    w1)
                   `cast`
                 (Interpreter.N:ID[0] <a>_R)) -}
1eb2b8266a1df4f5d9c88d2f14727ab4
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Base.String
    -> [GHC.Base.String]
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [2] -}
7333cfb6d0bb0fd6f965613097c8c96d
  newtype ID a = ID {unID :: a}
e9103acbb7e0a538b4e55de97dbfd285
  type role IDM representational phantom
  newtype IDM m a = IDM {unIDM :: m}
1d68a8f266a49faaf99b37091b2d6d6d
  efoldMap ::
    (Data.Data.Data a, GHC.Base.Monoid m) => (a -> m) -> a -> m
  {- Arity: 4,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLL),1*U(U,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U(C(C1(U)),A,A),U,A,A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ m
                   (w :: Data.Data.Data a)
                   (w1 :: GHC.Base.Monoid m)
                   (w2 :: a -> m)
                   (w3 :: a) ->
                 case w of ww { Data.Data.C:Data ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Interpreter.$wefoldMap @ a @ m ww1 ww2 w1 w2 w3 }) -}
29ced01f04062faf2309a53fc8414645
  emap :: Data.Data.Data a => (a -> a) -> a -> a
  {- Arity: 3,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLL),1*U(U,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: Data.Data.Data a) (w1 :: a -> a) (w2 :: a) ->
                 case w of ww { Data.Data.C:Data ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Interpreter.$wemap @ a ww1 ww2 w1 w2 }) -}
35fcba3d4fe854708b32fb094920cd6c
  emap1 ::
    (AbsLambdaNat.Exp -> AbsLambdaNat.Exp)
    -> AbsLambdaNat.Exp -> Interpreter.ID AbsLambdaNat.Exp
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ (eta :: AbsLambdaNat.Exp -> AbsLambdaNat.Exp)
                   (eta1 :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ Interpreter.ID
                   (\ @ d
                      @ b
                      ($dData :: Data.Data.Data d)
                      (eta2 :: Interpreter.ID (d -> b))[OneShot]
                      (eta3 :: d)[OneShot] ->
                    case Interpreter.emap2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                    case Interpreter.$fDataExp51 of dt3 { Data.Typeable.Internal.TrTyCon ipv ipv1 ipv2 ipv3 ipv4 ->
                    let {
                      $dTypeable :: Data.Typeable.Internal.Typeable d
                      = Data.Data.$p1Data @ d $dData
                    } in
                    case GHC.Magic.noinline
                           @ ([GHC.Fingerprint.Type.Fingerprint]
                              -> GHC.Fingerprint.Type.Fingerprint)
                           GHC.Fingerprint.fingerprintFingerprints
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ d
                                 $dTypeable
                                   `cast`
                                 (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                              (GHC.Types.:
                                 @ GHC.Fingerprint.Type.Fingerprint
                                 (Data.Typeable.Internal.typeRepFingerprint
                                    @ *
                                    @ d
                                    $dTypeable
                                      `cast`
                                    (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                                 (GHC.Types.[]
                                    @ GHC.Fingerprint.Type.Fingerprint))) of dt4 { GHC.Fingerprint.Type.Fingerprint dt5 dt6 ->
                    case $dTypeable
                           `cast`
                         (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N) of dt7 { DEFAULT ->
                    case GHC.Prim.eqWord# dt1 dt5 of lwild {
                      DEFAULT
                      -> (eta2 `cast` (Interpreter.N:ID[0] <d -> b>_R) eta3)
                           `cast`
                         (Sym (Interpreter.N:ID[0] <b>_R))
                      1#
                      -> case GHC.Prim.eqWord# dt2 dt6 of lwild1 {
                           DEFAULT
                           -> (eta2 `cast` (Interpreter.N:ID[0] <d -> b>_R) eta3)
                                `cast`
                              (Sym (Interpreter.N:ID[0] <b>_R))
                           1#
                           -> (eta2 `cast` (Interpreter.N:ID[0] <d -> b>_R)
                                 (eta eta3 `cast` (UnsafeCo representational d AbsLambdaNat.Exp))
                                   `cast`
                                 (UnsafeCo representational AbsLambdaNat.Exp d))
                                `cast`
                              (Sym (Interpreter.N:ID[0] <b>_R)) } } } } } })
                   Interpreter.$fDataExp8
                     `cast`
                   (forall (a :: <*>_N). <a>_R ->_R Sym (Interpreter.N:ID[0] <a>_R))
                   eta1) -}
4d6ac2bdd943bd5b67ea5ae559dede4f
  emap2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (GHC.Magic.noinline
                   @ ([GHC.Fingerprint.Type.Fingerprint]
                      -> GHC.Fingerprint.Type.Fingerprint)
                   GHC.Fingerprint.fingerprintFingerprints
                   Interpreter.emap3) -}
75ec4bafcd939b7bcf68cefc680c73d3
  emap3 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Interpreter.emap5
                   Interpreter.emap4) -}
e5d30b8bb7459cc5e7c525587d7d7d49
  emap4 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Interpreter.emap5
                   (GHC.Types.[] @ GHC.Fingerprint.Type.Fingerprint)) -}
b94246cb6d6fd528a93fc35df6adcfe2
  emap5 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Interpreter.$fDataExp51 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ds3 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
0afba63fa5e70639e69fd7fad7b11c6c
  evalCBN :: AbsLambdaNat.Exp -> AbsLambdaNat.Exp
  {- Arity: 1, Strictness: <S,1*U> -}
b28bdac7ae6fa9be52d469836cf08c00
  execCBN :: AbsLambdaNat.Program -> AbsLambdaNat.Exp
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AbsLambdaNat.Program) ->
                 case ds of wild { AbsLambdaNat.Prog e ->
                 Interpreter.evalCBN e }) -}
848c4a854e404daee132dce857e7bf81
  fresh :: AbsLambdaNat.Exp -> AbsLambdaNat.Id
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.fresh1
                  `cast`
                (<AbsLambdaNat.Exp>_R ->_R Sym (AbsLambdaNat.N:Id[0])) -}
1e69426dc0dd73b54a46b6d5b4dff360
  fresh1 :: AbsLambdaNat.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AbsLambdaNat.Exp) ->
                 Interpreter.fresh_pickFresh
                   Interpreter.fresh_infList
                   (Interpreter.$sfromList (Interpreter.fresh_ x))) -}
4bb1c8072e4751fdb9b50797aef74181
  fresh_ :: AbsLambdaNat.Exp -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
ea2efc1c82f23e5a0057226f9bbb2f57
  fresh_go :: GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U> -}
25078f53ce0b0ac93990bbab796afa12
  fresh_infList :: [[GHC.Types.Char]]
  {- Unfolding: (Interpreter.fresh_go 97#) -}
f6caf8350b4c81819a951b0daa813202
  fresh_pickFresh ::
    [GHC.Base.String]
    -> Data.Set.Internal.Set GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
c3eaa05f0951fb8d90b0183ba1300bd4
  subst ::
    AbsLambdaNat.Id
    -> AbsLambdaNat.Exp -> AbsLambdaNat.Exp -> AbsLambdaNat.Exp
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
7333cfb6d0bb0fd6f965613097c8c96d
  unID :: Interpreter.ID a -> a
  RecSel Left Interpreter.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.unID1
                  `cast`
                (forall (a :: <*>_N).
                 <Interpreter.ID a>_R ->_R Interpreter.N:ID[0] <a>_R) -}
7333cfb6d0bb0fd6f965613097c8c96d
  unID1 :: Interpreter.ID a -> Interpreter.ID a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Interpreter.ID a) -> ds) -}
e9103acbb7e0a538b4e55de97dbfd285
  unIDM :: Interpreter.IDM m a -> m
  RecSel Left Interpreter.IDM
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.unIDM1
                  `cast`
                (forall (m :: <*>_N) (a :: <*>_N).
                 <Interpreter.IDM m a>_R ->_R Interpreter.N:IDM[0] <m>_R <a>_P) -}
e9103acbb7e0a538b4e55de97dbfd285
  unIDM1 :: Interpreter.IDM m a -> Interpreter.IDM m a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ m @ a (ds :: Interpreter.IDM m a) -> ds) -}
instance [orphan] Data.Data.Data [AbsLambdaNat.Exp]
  = Interpreter.$fDataExp
instance [orphan] Data.Data.Data [AbsLambdaNat.Id]
  = Interpreter.$fDataId
"SPEC/Interpreter fromList @ String" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                 GHC.Base.String)
  Data.Set.Internal.fromList @ [GHC.Types.Char] $dOrd
  = Interpreter.$sfromList
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

