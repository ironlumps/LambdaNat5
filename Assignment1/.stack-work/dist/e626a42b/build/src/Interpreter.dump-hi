
==================== FINAL INTERFACE ====================
2019-10-02 23:59:43.0829562 UTC

interface LambdaNat-0.1.0.0-2kfAZLS9jVXK0OvNqCZE1W:Interpreter [orphan module] 8064
  interface hash: 3e4f9283e180d1e33e8d0f008dced039
  ABI hash: d7b0cb5961655ad47cab6ea053b963f5
  export-list hash: 99fc2427288defdf50aa1c098f6dbce0
  orphan hash: c5f303cb781c677bdfe4510a51ffb733
  flag hash: 14384f4a8d7f461de2211a711161200e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Interpreter.efoldMap
  Interpreter.emap
  Interpreter.evalCBN
  Interpreter.execCBN
  Interpreter.fresh
  Interpreter.fresh_
  Interpreter.subst
  Interpreter.ID{Interpreter.ID unID}
  Interpreter.IDM{Interpreter.IDM unIDM}
module dependencies: AbsLambdaNat ErrM PrintLambdaNat
package dependencies: array-0.5.3.0 base-4.12.0.0
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 pretty-1.1.3.6 template-haskell-2.14.0.0
                      transformers-0.5.6.2 traverse-with-class-1.0.0.0
orphans: traverse-with-class-1.0.0.0:Data.Generics.Traversable.Instances
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Set.Internal
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
import  -/  AbsLambdaNat 178a9cc653dd36fa76d6d95a625074d6
  exports: f4356a3ee98ac6a6811849de911eb54a
  EAbs 9d9f10a93317f41f7f9a8552b2e2b40a
  EApp 0938e0a280fdba35216b6732d4dea303
  ECons a3fd34f0f6a430353937f8a925c85ade
  EFix 1e61a274da8076b4db7de55cd4675f14
  EHd a5c165b979937f0b4f43f6681b547009
  EIf f599091be846ccea41a12480d9f1a6d0
  ELet fe332d63780e721e54b8b91c936d3d0f
  EMinusOne 5ef16d9b4050d6d89bcb5eb9ec67afcf
  ENat0 a918d1f65941b5cdb6e3eed2653225e9
  ENatS af5800ec08aa30daa5bf2118c13bcf73
  ENil 01ee979875d0df7a46382276affd0ee7
  ERec b2f42da595379ee367d05bf861ac6bbc
  ETl 42e320b9437cd1d58b0543c7c88e4695
  EVar 5a79a8b244cf665e764a6034e875851d
  Exp d329577efdc698dc9750b5cdb192e262
  Id 8f0ece0b1f6a584aa8e25f5efe448193
  Id 8c90b5b8ba7785e159bb6b00f7c7f125
  Prog 870663b393bd734b4e7ade847c3f3fd6
  Program 36f2641f44157e75a69dd21835071009
import  -/  ErrM 8ba030ed343d705e2fc1649fd6f9d7eb
  exports: 726d847f2f1b1e8d5f270df9da682fb7
import  -/  PrintLambdaNat 7837347bbebb8aebfbf16ca512fecddf
  exports: a4200cb39ff3818400fe02d70344b304
import  -/  base-4.12.0.0:Data.Data bd6f9484e4492e921cd91785f1f3f32c
import  -/  base-4.12.0.0:Data.Typeable 7895bbef2a54c6e075d73bac512c2b72
import  -/  base-4.12.0.0:Data.Typeable.Internal 25206d2a000f47a857c6f60c6b1f8b66
import  -/  base-4.12.0.0:GHC.Base 954f4c258d193fab7048a63bfeb56dcf
import  -/  base-4.12.0.0:GHC.Num 009f4fca9200daff9e3ffbe2d7676a2f
import  -/  base-4.12.0.0:GHC.Show 48dce8b8129312101170e57c24f3ecbd
import  -/  base-4.12.0.0:Prelude aea9afd24db8aed3563d7d850ea453c0
import  -/  containers-0.6.0.1:Data.Map 26baed967f6b7a7e22b868215089f0e6
import  -/  containers-0.6.0.1:Data.Set 5e2df3d6b96ca95c2ba65f6b3e312f5d
import  -/  containers-0.6.0.1:Data.Set.Internal 40a7b1029de8ed3f7988ce210526b331
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  traverse-with-class-1.0.0.0:Data.Generics.Traversable 6a9d0ab1ab32bd6b0adf49513637d24c
7f7c83485f66f8393266ef62a4a2b700
  $cId :: Data.Data.Constr
  {- Strictness: m -}
2c19840bf02f4b7a0cd11b500c8a52ac
  $fDataExp :: Data.Data.Data AbsLambdaNat.Exp
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Exp
                  Interpreter.$fDataExp51
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <AbsLambdaNat.Exp>_N)
                  Interpreter.$fDataExp_$cgfoldl
                  Interpreter.$fDataExp_$cgunfold
                  Interpreter.$fDataExp_$ctoConstr
                  Interpreter.$fDataExp_$cdataTypeOf
                  Interpreter.$fDataExp_$cdataCast1
                  Interpreter.$fDataExp_$cdataCast2
                  Interpreter.$fDataExp7
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <AbsLambdaNat.Exp>_R
                   ->_R Data.Functor.Identity.N:Identity[0] <AbsLambdaNat.Exp>_R)
                  Interpreter.$fDataExp6
                    `cast`
                  (forall (r :: <*>_N) (r' :: <*>_N).
                   <r -> r' -> r>_R
                   ->_R <r>_R
                   ->_R <forall d. Data.Data.Data d => d -> r'>_R
                   ->_R <AbsLambdaNat.Exp>_R
                   ->_R Data.Functor.Const.N:Const[0]
                            <*>_N <r>_R <AbsLambdaNat.Exp>_P)
                  Interpreter.$fDataExp_$cgmapQr
                  Interpreter.$fDataExp_$cgmapQ
                  Interpreter.$fDataExp_$cgmapQi
                  Interpreter.$fDataExp_$cgmapM
                  Interpreter.$fDataExp_$cgmapMp
                  Interpreter.$fDataExp_$cgmapMo -}
05e2f3f7fdf85cf376ad65a8b650f141
  $fDataExp1 :: g -> Data.Data.Qi u g
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ u @ g (ds :: g) -> Interpreter.$fDataExp2 @ u @ g) -}
8ce720209597715b2f408759899960c4
  $fDataExp10 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp11) -}
e660fcc87f66b03edcd01a5647a45716
  $fDataExp11 :: Data.Data.ConIndex
b974f0581131e75cea3913b2b55d129c
  $fDataExp12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EVar"#) -}
257f1e6b98aee1581773e59b51d0352d
  $fDataExp13 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp14) -}
0f0d3e8fa7a1016e076a2bdfef5cc696
  $fDataExp14 :: Data.Data.ConIndex
de960e128f1c71d62332c78697d2fbd1
  $fDataExp15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ENatS"#) -}
dd34d19c16b939b035d1e15ce4c6e087
  $fDataExp16 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp17) -}
28da33c6fcc9b778a2df91955e05ec52
  $fDataExp17 :: Data.Data.ConIndex
f0bb024a6f79c831d699fbaa4e3f5e73
  $fDataExp18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ENat0"#) -}
ebe6f967e8e427889e8e7be5b4712187
  $fDataExp19 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp20) -}
bdff82f22653a1f576ca24071f9cedac
  $fDataExp2 :: Data.Data.Qi u g
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ u @ g ->
                 Data.Data.Qi
                   @ *
                   @ u
                   @ g
                   Interpreter.$fDataExp3
                   (GHC.Maybe.Nothing @ u)) -}
ed92db8901ca9e0b47552355e9201840
  $fDataExp20 :: Data.Data.ConIndex
c793a91494ef6ba8c9b9f8f0b66c771b
  $fDataExp21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ECons"#) -}
b5460cd584619a80ddad56f83b5c69a7
  $fDataExp22 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp23) -}
12f2b72abdefc65522712e654379c008
  $fDataExp23 :: Data.Data.ConIndex
27d32a58d3906bf7f0c3bb26f4d8e87b
  $fDataExp24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ENil"#) -}
04f3897b308ec5b6bb393ff4f445bb2b
  $fDataExp25 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp26) -}
d44e94569cc142f3e35d3c8cc237e2b8
  $fDataExp26 :: Data.Data.ConIndex
043ec527bb0d5b24ef4359796b8ad5bb
  $fDataExp27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EApp"#) -}
7cdb6d260ecb05db3702ce6e5b3b4d34
  $fDataExp28 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp29) -}
5d6fe82013bfc8fcb26d53117074c456
  $fDataExp29 :: Data.Data.ConIndex
181a6bb9a8ff4b110cb5d5c6258f869c
  $fDataExp3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1c8d3b988e99d885dece5821efdcb445
  $fDataExp30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EMinusOne"#) -}
3846dddcf1b2b49551fa3c3744405051
  $fDataExp31 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp32) -}
81a750f3a1a78ae50ac01ef059a1f217
  $fDataExp32 :: Data.Data.ConIndex
17fefc9f28fa55cc0d139f35f4f155d4
  $fDataExp33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ETl"#) -}
2dfa860d42a1ef7e4e7f4b897685c9d2
  $fDataExp34 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp35) -}
2a198a0e7a2ea115cf029b7372b1f387
  $fDataExp35 :: Data.Data.ConIndex
2389f3338f3edd6fb52e30f18bc4c13f
  $fDataExp36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EHd"#) -}
c5053c87d42834eaebe567f15e139e0c
  $fDataExp37 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp38) -}
a13e805cfe2e41922e40e48c6790a38a
  $fDataExp38 :: Data.Data.ConIndex
63fd44c04ca52618240ca7dfb09e63ad
  $fDataExp39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ERec"#) -}
793b2bb8507da154ae1c19ad7d59b306
  $fDataExp4 :: g -> [u] -> [u]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ u @ g (ds :: g) (eta :: [u]) -> eta) -}
04d0c3c813531a3b93af8ccfe3869d78
  $fDataExp40 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp41) -}
21759d1b9ad05239a5734069d8105667
  $fDataExp41 :: Data.Data.ConIndex
0a18be798c5e691fdeff46faad748fce
  $fDataExp42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ELet"#) -}
8f3e89128ed802f817caacfc78dc308b
  $fDataExp43 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp44) -}
93b81cfaa803d56ac786713b6b7159c8
  $fDataExp44 :: Data.Data.ConIndex
b4cda8a230f6c526e11ad86ec938ff56
  $fDataExp45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EIf"#) -}
344d5594eceee32891d9cde1dfce1e49
  $fDataExp46 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp47) -}
b18768834624bb48ffc3aa1d2f403d7f
  $fDataExp47 :: Data.Data.ConIndex
876ddeefc4194dd2d6c1e01ce60d4b22
  $fDataExp48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EAbs"#) -}
045c72a08c461044c5a676e63cd44432
  $fDataExp49 :: Data.Data.ConstrRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgConstr Interpreter.$fDataExp50) -}
ea5c3ce43965283c12b488edc346250a
  $fDataExp5 :: g -> r -> r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r @ g (ds :: g) (eta :: r) -> eta) -}
e847c8640d4b5301088a139159a6f85a
  $fDataExp50 :: Data.Data.ConIndex
967c0ca6ec067d9c239d76e18be01946
  $fDataExp51 :: Data.Typeable.Internal.TypeRep AbsLambdaNat.Exp
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ AbsLambdaNat.Exp
                        5982444640886602967##
                        17674864249696573178##
                        AbsLambdaNat.$trModule
                        AbsLambdaNat.$tcExp1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ AbsLambdaNat.Exp
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
37c433d587781cfd8d6da07930bf7ee5
  $fDataExp6 ::
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Exp
    -> Data.Functor.Const.Const r AbsLambdaNat.Exp
  {- Arity: 4, Strictness: <L,C(C1(U))><L,1*U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (eta :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ (Data.Functor.Const.Const r)
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: Data.Functor.Const.Const r (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds
                      c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                      (ds2 @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Const.Const r (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                   (\ @ g1 (ds3 :: g1)[OneShot] -> ds1)
                     `cast`
                   (forall (g1 :: <*>_N).
                    <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                   eta) -}
b755fe7c6ad4899c75eee78b3f96a8a9
  $fDataExp7 ::
    (forall b. Data.Data.Data b => b -> b)
    -> AbsLambdaNat.Exp
    -> Data.Functor.Identity.Identity AbsLambdaNat.Exp
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Interpreter.$fDataExp8
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
c838d50ea80478ac31a9d11562925449
  $fDataExp8 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a (v :: a) -> v) -}
93a567f275b32fcb214d66b664e83e7f
  $fDataExp9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EFix"#) -}
228cee8272ee86a0531f836c12bc1471
  $fDataExp_$cdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Exp)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Exp)) -}
fb5123c19c5f145786ea818402f81e54
  $fDataExp_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Exp)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d e.
                          (Data.Data.Data d, Data.Data.Data e) =>
                          c (t d e)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Exp)) -}
7b1d412562a873dfd222ac1eac66acc2
  $fDataExp_$cdataTypeOf :: AbsLambdaNat.Exp -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AbsLambdaNat.Exp) -> Interpreter.$tExp) -}
a9ea54618f9c354b39c996c496b029a4
  $fDataExp_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> AbsLambdaNat.Exp -> c AbsLambdaNat.Exp
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><L,1*C1(U)><S,1*U> -}
a8285eff6c44ede86755e6a917c085e1
  $fDataExp_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp -> m AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    let {
                      lvl11 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl11
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)
                   eta) -}
d3c93eb5a075639bc44328b90d300614
  $fDataExp_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp -> m AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Exp) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMo @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
eb66f6fa66fd72ba8b661fd5adef11f1
  $fDataExp_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp -> m AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Exp) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMp @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
77bd9b0f7072faf08d0e2a492e577e59
  $fDataExp_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Exp -> [u]
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: AbsLambdaNat.Exp) ->
                 (Interpreter.$fDataExp_$cgfoldl
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Interpreter.$fDataExp4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0] <*>_N <[u]>_R <AbsLambdaNat.Exp>_P)
                   (GHC.Types.[] @ u)) -}
e2e56fda5cf8a6d933066cde4b079e89
  $fDataExp_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Exp -> u
  {- Arity: 3, Strictness: <L,U(U)><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: AbsLambdaNat.Exp) ->
                 case Interpreter.$fDataExp_$cgfoldl
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))[OneShot]
                           (a1 :: d)[OneShot] ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.==# x1 y of lwild {
                              DEFAULT -> q
                              1# -> GHC.Maybe.Just @ u (ds1 @ d $dData1 a1) } } }) })
                        (Interpreter.$fDataExp1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
ff45ab006de186d4188e684a16c0df21
  $fDataExp_$cgmapQr ::
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Exp
    -> r
  {- Arity: 4, Strictness: <L,C(C1(U))><L,U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: AbsLambdaNat.Exp) ->
                 (Interpreter.$fDataExp_$cgfoldl
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Interpreter.$fDataExp5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0] <*>_N <r>_R <AbsLambdaNat.Exp>_P)
                   ds1) -}
12ed5c89ab903c49ddd111a67ad4ce61
  $fDataExp_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c AbsLambdaNat.Exp
  {- Arity: 3,
     Strictness: <L,C(C1(U))><L,1*C1(U)><S(SLLLL),1*U(1*U,A,A,A,1*U(1*U,A))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ c :: * -> *
                   (w :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (w1 :: forall r. r -> c r)
                   (w2 :: Data.Data.Constr) ->
                 case w2 of ww { Data.Data.Constr ww1 ww2 ww3 ww4 ww5 ->
                 Interpreter.$w$cgunfold @ c w w1 ww1 ww5 }) -}
b31aabdf462dfe696132c1e4b20906c0
  $fDataExp_$ctoConstr :: AbsLambdaNat.Exp -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: AbsLambdaNat.Exp) ->
                 case w of wild {
                   AbsLambdaNat.EAbs ds ds1
                   -> Data.Data.Constr
                        Interpreter.$fDataExp49
                        Interpreter.$fDataExp_w14
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EIf ds ds1 ds2 ds3
                   -> Data.Data.Constr
                        Interpreter.$fDataExp46
                        Interpreter.$fDataExp_w13
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ELet ds ds1 ds2
                   -> Data.Data.Constr
                        Interpreter.$fDataExp43
                        Interpreter.$fDataExp_w12
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ERec ds ds1 ds2
                   -> Data.Data.Constr
                        Interpreter.$fDataExp40
                        Interpreter.$fDataExp_w11
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EHd ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp37
                        Interpreter.$fDataExp_w10
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ETl ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp34
                        Interpreter.$fDataExp_w9
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EMinusOne ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp31
                        Interpreter.$fDataExp_w8
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EApp ds ds1
                   -> Data.Data.Constr
                        Interpreter.$fDataExp28
                        Interpreter.$fDataExp_w7
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ENil
                   -> Data.Data.Constr
                        Interpreter.$fDataExp25
                        Interpreter.$fDataExp_w6
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ECons ds ds1
                   -> Data.Data.Constr
                        Interpreter.$fDataExp22
                        Interpreter.$fDataExp_w5
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ENat0
                   -> Data.Data.Constr
                        Interpreter.$fDataExp19
                        Interpreter.$fDataExp_w4
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.ENatS ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp16
                        Interpreter.$fDataExp_w3
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EVar ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp13
                        Interpreter.$fDataExp_w2
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp
                   AbsLambdaNat.EFix ds
                   -> Data.Data.Constr
                        Interpreter.$fDataExp10
                        Interpreter.$fDataExp_w1
                        (GHC.Types.[] @ GHC.Base.String)
                        Data.Data.Prefix
                        Interpreter.$tExp }) -}
626a29aa775e238bbeb87cb563fdf2a0
  $fDataExp_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp9) -}
f6a8aa1047c06fb8ffc65f37503ebec1
  $fDataExp_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp36) -}
3a7ee56748d08109b82127160a104223
  $fDataExp_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp39) -}
39fc146fdcaf2b2dafa1806094a59f07
  $fDataExp_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp42) -}
9e1455ef7c9e9c553e92ee1c5f3f7ec7
  $fDataExp_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp45) -}
032a4c391c49d2569ed78e8341611821
  $fDataExp_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp48) -}
f52665f7909601ef1c039056c7c104da
  $fDataExp_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp12) -}
c7f51a9107bf6646556ff7d03d307b4a
  $fDataExp_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp15) -}
652439a885b5092e9d042fea786ca277
  $fDataExp_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp18) -}
480239d4a62d7af6a8326b466e532ed9
  $fDataExp_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp21) -}
cf3e6e7ab6b170a1af066cac5eed4628
  $fDataExp_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp24) -}
525db69d9920c37b29a6ac2a272f0957
  $fDataExp_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp27) -}
d9e2256aad9546974cb9992c0497ddf0
  $fDataExp_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp30) -}
1cc6df2058a67d6245c51e6875499d62
  $fDataExp_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Interpreter.$fDataExp33) -}
721c3a62b8ffbb0f1b2d230adc82a164
  $fDataId :: Data.Data.Data AbsLambdaNat.Id
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ AbsLambdaNat.Id
                  Interpreter.$fDataId7
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <AbsLambdaNat.Id>_N)
                  Interpreter.$fDataId_$cgfoldl
                  Interpreter.$fDataId_$cgunfold
                  Interpreter.$fDataId_$ctoConstr
                  Interpreter.$fDataId_$cdataTypeOf
                  Interpreter.$fDataId_$cdataCast1
                  Interpreter.$fDataId_$cdataCast2
                  Interpreter.$fDataId3
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <AbsLambdaNat.Id>_R
                   ->_R Sym (AbsLambdaNat.N:Id[0]))
                  Interpreter.$fDataId_$cgmapQl
                  Interpreter.$fDataId_$cgmapQr
                  Interpreter.$fDataId_$cgmapQ
                  Interpreter.$fDataId_$cgmapQi
                  Interpreter.$fDataId_$cgmapM
                  Interpreter.$fDataId_$cgmapMp
                  Interpreter.$fDataId_$cgmapMo -}
53c190f5cb21ab07dd753918a7558e35
  $fDataId1 :: (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Interpreter.$fDataId2
                    `cast`
                  (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])),
                  GHC.Types.False)) -}
30fadade42d7e678f01daba65c659155
  $fDataId2 :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: GHC.Base.String) -> v) -}
b09a5d4f319739099105f7bab8fbc3fa
  $fDataId3 ::
    (forall b. Data.Data.Data b => b -> b)
    -> AbsLambdaNat.Id -> GHC.Base.String
  {- Arity: 2, Strictness: <C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: AbsLambdaNat.Id) ->
                 ds
                   @ GHC.Base.String
                   Data.Data.$fData[]_$s$fData[]
                   x0 `cast` (AbsLambdaNat.N:Id[0])) -}
143e0c70f583bb2a3bce6cbc647e985a
  $fDataId4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep Interpreter.$fDataId5) -}
878cdf5f6ec4f824233accb67e8e10de
  $fDataId5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Interpreter.$cId
                   (GHC.Types.[] @ Data.Data.Constr)) -}
ab7b938a09acd060e4f99735d8ec7965
  $fDataId6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id"#) -}
7e80334199070abe0a51588a5ffa2e2d
  $fDataId7 :: Data.Typeable.Internal.TypeRep AbsLambdaNat.Id
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ AbsLambdaNat.Id
                        5140545978279584719##
                        5841641633050665286##
                        AbsLambdaNat.$trModule
                        AbsLambdaNat.$tcId1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ AbsLambdaNat.Id
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
31609ba10fc4637442453da6ac6bf15d
  $fDataId_$cdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Id)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Id)) -}
8d0cbea33ed6bc9aca2393919e8a884a
  $fDataId_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Maybe.Maybe (c AbsLambdaNat.Id)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d e.
                          (Data.Data.Data d, Data.Data.Data e) =>
                          c (t d e)) ->
                 GHC.Maybe.Nothing @ (c AbsLambdaNat.Id)) -}
11212fb894a51df7c3c12087af164549
  $fDataId_$cdataTypeOf :: AbsLambdaNat.Id -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AbsLambdaNat.Id) -> Interpreter.$tId) -}
724acbee299f0d6b6093e58467f9865b
  $fDataId_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> AbsLambdaNat.Id -> c AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c :: * -> *
                   (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: AbsLambdaNat.Id) ->
                 k @ GHC.Base.String
                   @ AbsLambdaNat.Id
                   Data.Data.$fData[]_$s$fData[]
                   (z @ (GHC.Base.String -> AbsLambdaNat.Id)
                      Interpreter.$fDataId2
                        `cast`
                      (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])))
                   ds `cast` (AbsLambdaNat.N:Id[0])) -}
636d6cd449dc96d4a4637e44cfc466e9
  $fDataId_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id -> m AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLL),1*U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Id) ->
                 case w of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 Interpreter.$w$cgmapM @ m ww2 ww4 w1 w2 }) -}
826d5c70baefa86fc3083ef3950bc1be
  $fDataId_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id -> m AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Id) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMo1 @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
ca2aa19e468c12b88a6dfba5440bbcfb
  $fDataId_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id -> m AbsLambdaNat.Id
  {- Arity: 3,
     Strictness: <S(LS(LC(C(S))LLL)LL),1*U(A,1*U(A,C(C1(U)),A,C(U),A),U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.MonadPlus m)
                   (w1 :: forall d. Data.Data.Data d => d -> m d)
                   (w2 :: AbsLambdaNat.Id) ->
                 case w of ww { GHC.Base.C:MonadPlus ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 Interpreter.$w$cgmapMp1 @ m ww7 ww9 ww3 ww4 w1 w2 } }) -}
6b344c091f9976ab01a2b5c939e60b4b
  $fDataId_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Id -> [u]
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: AbsLambdaNat.Id) ->
                 GHC.Types.:
                   @ u
                   (ds
                      @ GHC.Base.String
                      Data.Data.$fData[]_$s$fData[]
                      x0 `cast` (AbsLambdaNat.N:Id[0]))
                   (GHC.Types.[] @ u)) -}
87a9cc7208c00d0aa977dac3aee0720f
  $fDataId_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> AbsLambdaNat.Id -> u
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: AbsLambdaNat.Id) ->
                 case ds of wild { GHC.Types.I# x1 ->
                 case x1 of wild1 {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0#
                   -> ds1
                        @ GHC.Base.String
                        Data.Data.$fData[]_$s$fData[]
                        x `cast` (AbsLambdaNat.N:Id[0]) } }) -}
d63dc685c95cfecc9f733456480c28ec
  $fDataId_$cgmapQl ::
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Id
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (eta :: AbsLambdaNat.Id) ->
                 ds
                   ds1
                   (ds2
                      @ GHC.Base.String
                      Data.Data.$fData[]_$s$fData[]
                      eta `cast` (AbsLambdaNat.N:Id[0]))) -}
8c7bceba98c50f07d92da6c2f7f86a3d
  $fDataId_$cgmapQr ::
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> AbsLambdaNat.Id
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: AbsLambdaNat.Id) ->
                 ds
                   (ds2
                      @ GHC.Base.String
                      Data.Data.$fData[]_$s$fData[]
                      x0 `cast` (AbsLambdaNat.N:Id[0]))
                   ds1) -}
a6b570db456d68af0fa84cdd6a8ed083
  $fDataId_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c AbsLambdaNat.Id
  {- Arity: 3, Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c :: * -> *
                   (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ GHC.Base.String
                   @ AbsLambdaNat.Id
                   Data.Data.$fData[]_$s$fData[]
                   (z @ (GHC.Base.String -> AbsLambdaNat.Id)
                      Interpreter.$fDataId2
                        `cast`
                      (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])))) -}
5010385eec7f33de284769be5a04c791
  $fDataId_$ctoConstr :: AbsLambdaNat.Id -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: AbsLambdaNat.Id) -> Interpreter.$cId) -}
8012f13bf9efb30103ab51f9c9379843
  $fDataId_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Interpreter.$fDataId6) -}
e845b65abed91451326f41bc7f308418
  $sfromList ::
    [GHC.Base.String] -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Base.String
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ GHC.Base.String
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Base.String)
                             (Data.Set.Internal.Tip @ GHC.Base.String) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 x ipv of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Interpreter.$sfromList_go
                                  wild1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ GHC.Base.String)
                                     (Data.Set.Internal.Tip @ GHC.Base.String)) }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Interpreter.$wgo3
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ GHC.Base.String)
                                     (Data.Set.Internal.Tip @ GHC.Base.String))
                                  wild1 } } } }) -}
7dfe9f824633ded44c1020c6e11e10fd
  $sfromList_go ::
    [GHC.Base.String]
    -> Data.Set.Internal.Set GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
dda5df09f42698418a3d3c2acafae651
  $sinsert_$sgo3 ::
    GHC.Base.String
    -> GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
bb2cfd91acbedffde080f54d2ac1acb1
  $smember_go3 ::
    GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ac12ac88ebabd121d48f9b73fe76a57f
  $tExp :: Data.Data.DataType
  {- Strictness: m -}
7f5bc3e89b146b714cb4485b8556e7cd
  $tId :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Interpreter.$fDataId_w1
                   Interpreter.$fDataId4) -}
0f17a690a60ce977932557769a2bd156
  $tc'ID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13194118521444138584##
                   10244260096120242063##
                   Interpreter.$trModule
                   Interpreter.$tc'ID2
                   1#
                   Interpreter.$tc'ID1) -}
cf7ab8346d7123be9b6171df0e1c42d9
  $tc'ID1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bc507aec1f84876ee2b8906373e946c3
  $tc'ID2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tc'ID3) -}
fc844db292e77f75e010dc1ad229939a
  $tc'ID3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ID"#) -}
204caedf8e3abfc3f0d56fcfb8b81d0a
  $tc'IDM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6822578128787983119##
                   7529072871513599304##
                   Interpreter.$trModule
                   Interpreter.$tc'IDM2
                   2#
                   Interpreter.$tc'IDM1) -}
f1d86c6696ee41f5b91bce07ece63ac2
  $tc'IDM1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b69c51d32ac43ced02804f876d961e58
  $tc'IDM2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tc'IDM3) -}
f0366a014953763144f474fff31c50ac
  $tc'IDM3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IDM"#) -}
df04234d3b881954bd0a09d79a4c34c1
  $tcID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17081974877084781453##
                   18096961563476778734##
                   Interpreter.$trModule
                   Interpreter.$tcID1
                   0#
                   GHC.Types.krep$*Arr*) -}
c6d5961054d9418658c318029519ca39
  $tcID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tcID2) -}
8bdd0b19af2431b953d05310d4fa8ef2
  $tcID2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ID"#) -}
d0d9e6d6125a940a438efc7122b4ba38
  $tcIDM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6365461353966102421##
                   11709339717930354558##
                   Interpreter.$trModule
                   Interpreter.$tcIDM1
                   0#
                   GHC.Types.krep$*->*->*) -}
3e972de3e6c14e3ce801b7a44ccf924b
  $tcIDM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$tcIDM2) -}
b89c38d6fd90d76af5e06259c4f0028c
  $tcIDM2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IDM"#) -}
152e4b8005ef751ea9802f4f567eff52
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Interpreter.$trModule3
                   Interpreter.$trModule1) -}
53d12dfaab38a44be8efa791b0649440
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$trModule2) -}
c1627e3ba77e112383dcb58f6f88a80b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Interpreter"#) -}
e944c7615f8dc08584dac186eee2fc9c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpreter.$trModule4) -}
1e2606a91ed4dcacab9efcf31dae6a8a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("LambdaNat-0.1.0.0-2kfAZLS9jVXK0OvNqCZE1W"#) -}
ef6f412934521808f67af657a6526a9d
  $w$cgmapM ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id
    -> m AbsLambdaNat.Id
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Id) ->
                 let {
                   lvl11 :: m GHC.Base.String
                   = w @ GHC.Base.String
                       Data.Data.$fData[]_$s$fData[]
                       w1 `cast` (AbsLambdaNat.N:Id[0])
                 } in
                 ww
                   @ (GHC.Base.String -> AbsLambdaNat.Id)
                   @ AbsLambdaNat.Id
                   (ww1
                      @ (GHC.Base.String -> AbsLambdaNat.Id)
                      Interpreter.$fDataId2
                        `cast`
                      (<GHC.Base.String>_R ->_R Sym (AbsLambdaNat.N:Id[0])))
                   (\ (c' :: GHC.Base.String -> AbsLambdaNat.Id) ->
                    ww
                      @ GHC.Base.String
                      @ AbsLambdaNat.Id
                      lvl11
                      (\ (x' :: GHC.Base.String) -> ww1 @ AbsLambdaNat.Id (c' x')))) -}
9d8e3a897ba624ac99d1969962a2d27b
  $w$cgmapMo ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp
    -> m AbsLambdaNat.Exp
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Exp) ->
                 ww
                   @ (AbsLambdaNat.Exp, GHC.Types.Bool)
                   @ AbsLambdaNat.Exp
                   (Interpreter.$fDataExp_$cgfoldl
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl11 :: m d = w @ d $dData1 y
                       } in
                       ww
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds1 :: (d -> b, GHC.Types.Bool)) ->
                          case ds1 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> ww3
                                 @ (b, GHC.Types.Bool)
                                 (ww
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl11
                                    (\ (y' :: d) ->
                                     ww1 @ (b, GHC.Types.Bool) (h y', GHC.Types.True)))
                                 (ww1 @ (b, GHC.Types.Bool) (h y, GHC.Types.False))
                            GHC.Types.True
                            -> ww1 @ (b, GHC.Types.Bool) (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       ww1 @ (g, GHC.Types.Bool) (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      w1)
                     `cast`
                   (Data.Data.N:Mp[0] <m>_R <AbsLambdaNat.Exp>_N)
                   (\ (ds :: (AbsLambdaNat.Exp, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Exp
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Exp x' } })) -}
747dc5c46f2546f4d7b35d902d15c529
  $w$cgmapMo1 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id
    -> m AbsLambdaNat.Id
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Id) ->
                 ww
                   @ (AbsLambdaNat.Id, GHC.Types.Bool)
                   @ AbsLambdaNat.Id
                   (let {
                      lvl11 :: m GHC.Base.String
                      = w @ GHC.Base.String
                          Data.Data.$fData[]_$s$fData[]
                          w1 `cast` (AbsLambdaNat.N:Id[0])
                    } in
                    ww
                      @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                      @ (AbsLambdaNat.Id, GHC.Types.Bool)
                      (ww1
                         @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                         Interpreter.$fDataId1)
                      (\ (ds1 :: (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)) ->
                       case ds1 of wild { (,) h b1 ->
                       case b1 of wild1 {
                         GHC.Types.False
                         -> ww3
                              @ (AbsLambdaNat.Id, GHC.Types.Bool)
                              (ww
                                 @ GHC.Base.String
                                 @ (AbsLambdaNat.Id, GHC.Types.Bool)
                                 lvl11
                                 (\ (y' :: GHC.Base.String) ->
                                  ww1 @ (AbsLambdaNat.Id, GHC.Types.Bool) (h y', GHC.Types.True)))
                              (ww1
                                 @ (AbsLambdaNat.Id, GHC.Types.Bool)
                                 (h w1 `cast` (AbsLambdaNat.N:Id[0]), GHC.Types.False))
                         GHC.Types.True
                         -> ww1
                              @ (AbsLambdaNat.Id, GHC.Types.Bool)
                              (h w1 `cast` (AbsLambdaNat.N:Id[0]), GHC.Types.True) } }))
                   (\ (ds :: (AbsLambdaNat.Id, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Id
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Id x' } })) -}
2f7204f0d133514b7208f736e44f4fcc
  $w$cgmapMp ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Exp
    -> m AbsLambdaNat.Exp
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,C(C1(U))><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Exp) ->
                 ww
                   @ (AbsLambdaNat.Exp, GHC.Types.Bool)
                   @ AbsLambdaNat.Exp
                   (Interpreter.$fDataExp_$cgfoldl
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl11 :: m d = w @ d $dData1 y
                       } in
                       ww
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds1 :: (d -> b, GHC.Types.Bool)) ->
                          case ds1 of wild { (,) h b1 ->
                          ww3
                            @ (b, GHC.Types.Bool)
                            (ww
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl11
                               (\ (y' :: d) -> ww1 @ (b, GHC.Types.Bool) (h y', GHC.Types.True)))
                            (ww1 @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       ww1 @ (g, GHC.Types.Bool) (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      w1)
                     `cast`
                   (Data.Data.N:Mp[0] <m>_R <AbsLambdaNat.Exp>_N)
                   (\ (ds :: (AbsLambdaNat.Exp, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Exp
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Exp x' } })) -}
e71de479d2450d06b91f0fb57e30541b
  $w$cgmapMp1 ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (forall a. m a)
    -> (forall a. m a -> m a -> m a)
    -> (forall d. Data.Data.Data d => d -> m d)
    -> AbsLambdaNat.Id
    -> m AbsLambdaNat.Id
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(C1(U))><L,1*C1(C1(U))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: forall a. m a)
                   (ww3 :: forall a. m a -> m a -> m a)
                   (w :: forall d. Data.Data.Data d => d -> m d)
                   (w1 :: AbsLambdaNat.Id) ->
                 ww
                   @ (AbsLambdaNat.Id, GHC.Types.Bool)
                   @ AbsLambdaNat.Id
                   (let {
                      lvl11 :: m GHC.Base.String
                      = w @ GHC.Base.String
                          Data.Data.$fData[]_$s$fData[]
                          w1 `cast` (AbsLambdaNat.N:Id[0])
                    } in
                    ww
                      @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                      @ (AbsLambdaNat.Id, GHC.Types.Bool)
                      (ww1
                         @ (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)
                         Interpreter.$fDataId1)
                      (\ (ds1 :: (GHC.Base.String -> AbsLambdaNat.Id, GHC.Types.Bool)) ->
                       case ds1 of wild { (,) h b1 ->
                       ww3
                         @ (AbsLambdaNat.Id, GHC.Types.Bool)
                         (ww
                            @ GHC.Base.String
                            @ (AbsLambdaNat.Id, GHC.Types.Bool)
                            lvl11
                            (\ (y' :: GHC.Base.String) ->
                             ww1 @ (AbsLambdaNat.Id, GHC.Types.Bool) (h y', GHC.Types.True)))
                         (ww1
                            @ (AbsLambdaNat.Id, GHC.Types.Bool)
                            (h w1 `cast` (AbsLambdaNat.N:Id[0]), b1)) }))
                   (\ (ds :: (AbsLambdaNat.Id, GHC.Types.Bool)) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> ww2 @ AbsLambdaNat.Id
                      GHC.Types.True -> ww1 @ AbsLambdaNat.Id x' } })) -}
f17fdccb4464ae250fb0c02ddfa8fb80
  $w$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.ConstrRep
    -> Data.Data.DataType
    -> c AbsLambdaNat.Exp
  {- Arity: 4,
     Strictness: <L,C(C1(U))><L,1*C1(U)><S,1*U><L,1*U(1*U,A)>,
     Inline: [2] -}
255d0335a0144ed6418e555532564924
  $wefoldMap ::
    Data.Typeable.Internal.Typeable a =>
    (forall (c :: * -> *).
     (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
     -> (forall g. g -> c g) -> a -> c a)
    -> GHC.Base.Monoid m => (a -> m) -> a -> m
  {- Arity: 5,
     Strictness: <L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,U(1*U(C(C1(U)),A,A),1*U,A,A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ m
                   (ww :: Data.Typeable.Internal.Typeable a)
                   (ww1 :: forall (c :: * -> *).
                           (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                           -> (forall g. g -> c g) -> a -> c a)
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a -> m)
                   (w2 :: a) ->
                 let {
                   lvl11 :: m = GHC.Base.mempty @ m w
                 } in
                 let {
                   $dSemigroup :: GHC.Base.Semigroup m = GHC.Base.$p1Monoid @ m w
                 } in
                 (ww1
                    @ (Interpreter.IDM m)
                    (\ @ d
                       @ b
                       ($dData :: Data.Data.Data d)
                       (eta :: Interpreter.IDM m (d -> b))
                       (eta1 :: d) ->
                     case Data.Typeable.Internal.sameTypeRep
                            @ *
                            @ *
                            @ d
                            @ a
                            (Data.Data.$p1Data @ d $dData)
                              `cast`
                            (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N)
                            ww
                              `cast`
                            (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild {
                       GHC.Types.False
                       -> eta
                            `cast`
                          (Interpreter.N:IDM[0] <m>_R <d -> b>_P ; Sym (Interpreter.N:IDM[0]
                                                                            <m>_R <b>_P))
                       GHC.Types.True
                       -> (GHC.Base.<>
                             @ m
                             $dSemigroup
                             eta `cast` (Interpreter.N:IDM[0] <m>_R <d -> b>_P)
                             (w1 eta1 `cast` (UnsafeCo representational d a)))
                            `cast`
                          (Sym (Interpreter.N:IDM[0] <m>_R <b>_P)) })
                    (\ @ g (ds :: g) -> lvl11)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Interpreter.N:IDM[0] <m>_R <g>_P))
                    w2)
                   `cast`
                 (Interpreter.N:IDM[0] <m>_R <a>_P)) -}
db5377b184ea51fba1cb3b289526d14d
  $wemap ::
    Data.Typeable.Internal.Typeable a =>
    (forall (c :: * -> *).
     (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
     -> (forall g. g -> c g) -> a -> c a)
    -> (a -> a) -> a -> a
  {- Arity: 4,
     Strictness: <L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (ww :: Data.Typeable.Internal.Typeable a)
                   (ww1 :: forall (c :: * -> *).
                           (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                           -> (forall g. g -> c g) -> a -> c a)
                   (w :: a -> a)
                   (w1 :: a) ->
                 let {
                   lvl11 :: GHC.Fingerprint.Type.Fingerprint
                   = GHC.Magic.noinline
                       @ ([GHC.Fingerprint.Type.Fingerprint]
                          -> GHC.Fingerprint.Type.Fingerprint)
                       GHC.Fingerprint.fingerprintFingerprints
                       (GHC.Types.:
                          @ GHC.Fingerprint.Type.Fingerprint
                          (Data.Typeable.Internal.typeRepFingerprint
                             @ *
                             @ a
                             ww `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                          (GHC.Types.:
                             @ GHC.Fingerprint.Type.Fingerprint
                             (Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                ww `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                             (GHC.Types.[] @ GHC.Fingerprint.Type.Fingerprint)))
                 } in
                 (ww1
                    @ Interpreter.ID
                    (\ @ d
                       @ b
                       ($dData :: Data.Data.Data d)
                       (eta :: Interpreter.ID (d -> b))
                       (eta1 :: d) ->
                     case lvl11 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case ww
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     let {
                       $dTypeable :: Data.Typeable.Internal.Typeable d
                       = Data.Data.$p1Data @ d $dData
                     } in
                     case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ d
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                               (GHC.Types.:
                                  @ GHC.Fingerprint.Type.Fingerprint
                                  (Data.Typeable.Internal.typeRepFingerprint
                                     @ *
                                     @ d
                                     $dTypeable
                                       `cast`
                                     (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                                  (GHC.Types.[]
                                     @ GHC.Fingerprint.Type.Fingerprint))) of dt4 { GHC.Fingerprint.Type.Fingerprint dt5 dt6 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N) of dt7 { DEFAULT ->
                     case GHC.Prim.eqWord# dt1 dt5 of lwild {
                       DEFAULT
                       -> (eta `cast` (Interpreter.N:ID[0] <d -> b>_R) eta1)
                            `cast`
                          (Sym (Interpreter.N:ID[0] <b>_R))
                       1#
                       -> case GHC.Prim.eqWord# dt2 dt6 of lwild1 {
                            DEFAULT
                            -> (eta `cast` (Interpreter.N:ID[0] <d -> b>_R) eta1)
                                 `cast`
                               (Sym (Interpreter.N:ID[0] <b>_R))
                            1#
                            -> (eta `cast` (Interpreter.N:ID[0] <d -> b>_R)
                                  (w eta1 `cast` (UnsafeCo representational d a))
                                    `cast`
                                  (UnsafeCo representational a d))
                                 `cast`
                               (Sym (Interpreter.N:ID[0] <b>_R)) } } } } } })
                    Interpreter.$fDataExp8
                      `cast`
                    (forall (a1 :: <*>_N).
                     <a1>_R ->_R Sym (Interpreter.N:ID[0] <a1>_R))
                    w1)
                   `cast`
                 (Interpreter.N:ID[0] <a>_R)) -}
c5b7e92a6438a90163de50fd2d5d45eb
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Base.String
    -> [GHC.Base.String]
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [2] -}
db70efeb97f1a5440e6870e01c1f1f92
  newtype ID a = ID {unID :: a}
c234589c50447fae57a284669a932b6f
  type role IDM representational phantom
  newtype IDM m a = IDM {unIDM :: m}
2cdacd7ef54d1a474993bc70632f13c3
  efoldMap ::
    (Data.Data.Data a, GHC.Base.Monoid m) => (a -> m) -> a -> m
  {- Arity: 4,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLL),1*U(U,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U(C(C1(U)),A,A),U,A,A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ m
                   (w :: Data.Data.Data a)
                   (w1 :: GHC.Base.Monoid m)
                   (w2 :: a -> m)
                   (w3 :: a) ->
                 case w of ww { Data.Data.C:Data ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Interpreter.$wefoldMap @ a @ m ww1 ww2 w1 w2 w3 }) -}
7cca8189e3dc3c7c38da23bed3f1c2a8
  emap :: Data.Data.Data a => (a -> a) -> a -> a
  {- Arity: 3,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLL),1*U(U,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: Data.Data.Data a) (w1 :: a -> a) (w2 :: a) ->
                 case w of ww { Data.Data.C:Data ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Interpreter.$wemap @ a ww1 ww2 w1 w2 }) -}
b7092b3b708f9c2db0ce44f1f5a9bde0
  emap1 ::
    (AbsLambdaNat.Exp -> AbsLambdaNat.Exp)
    -> AbsLambdaNat.Exp -> Interpreter.ID AbsLambdaNat.Exp
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ (eta :: AbsLambdaNat.Exp -> AbsLambdaNat.Exp)
                   (eta1 :: AbsLambdaNat.Exp) ->
                 Interpreter.$fDataExp_$cgfoldl
                   @ Interpreter.ID
                   (\ @ d
                      @ b
                      ($dData :: Data.Data.Data d)
                      (eta2 :: Interpreter.ID (d -> b))[OneShot]
                      (eta3 :: d)[OneShot] ->
                    case Interpreter.emap2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                    case Interpreter.$fDataExp51 of dt3 { Data.Typeable.Internal.TrTyCon ipv ipv1 ipv2 ipv3 ipv4 ->
                    let {
                      $dTypeable :: Data.Typeable.Internal.Typeable d
                      = Data.Data.$p1Data @ d $dData
                    } in
                    case GHC.Magic.noinline
                           @ ([GHC.Fingerprint.Type.Fingerprint]
                              -> GHC.Fingerprint.Type.Fingerprint)
                           GHC.Fingerprint.fingerprintFingerprints
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ d
                                 $dTypeable
                                   `cast`
                                 (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                              (GHC.Types.:
                                 @ GHC.Fingerprint.Type.Fingerprint
                                 (Data.Typeable.Internal.typeRepFingerprint
                                    @ *
                                    @ d
                                    $dTypeable
                                      `cast`
                                    (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N))
                                 (GHC.Types.[]
                                    @ GHC.Fingerprint.Type.Fingerprint))) of dt4 { GHC.Fingerprint.Type.Fingerprint dt5 dt6 ->
                    case $dTypeable
                           `cast`
                         (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N) of dt7 { DEFAULT ->
                    case GHC.Prim.eqWord# dt1 dt5 of lwild {
                      DEFAULT
                      -> (eta2 `cast` (Interpreter.N:ID[0] <d -> b>_R) eta3)
                           `cast`
                         (Sym (Interpreter.N:ID[0] <b>_R))
                      1#
                      -> case GHC.Prim.eqWord# dt2 dt6 of lwild1 {
                           DEFAULT
                           -> (eta2 `cast` (Interpreter.N:ID[0] <d -> b>_R) eta3)
                                `cast`
                              (Sym (Interpreter.N:ID[0] <b>_R))
                           1#
                           -> (eta2 `cast` (Interpreter.N:ID[0] <d -> b>_R)
                                 (eta eta3 `cast` (UnsafeCo representational d AbsLambdaNat.Exp))
                                   `cast`
                                 (UnsafeCo representational AbsLambdaNat.Exp d))
                                `cast`
                              (Sym (Interpreter.N:ID[0] <b>_R)) } } } } } })
                   Interpreter.$fDataExp8
                     `cast`
                   (forall (a :: <*>_N). <a>_R ->_R Sym (Interpreter.N:ID[0] <a>_R))
                   eta1) -}
600ea6e4b4d3cdae9a3ddf59c4017f44
  emap2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (GHC.Magic.noinline
                   @ ([GHC.Fingerprint.Type.Fingerprint]
                      -> GHC.Fingerprint.Type.Fingerprint)
                   GHC.Fingerprint.fingerprintFingerprints
                   Interpreter.emap3) -}
b4c4e2cd8372ac20f8c3925d07b04bbe
  emap3 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Interpreter.emap5
                   Interpreter.emap4) -}
ffeb06c569a419d4cb692ac77b2a8e08
  emap4 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Interpreter.emap5
                   (GHC.Types.[] @ GHC.Fingerprint.Type.Fingerprint)) -}
a98e34490a3cda27cd047c8bb7a09689
  emap5 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Interpreter.$fDataExp51 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ds3 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
a28db9ef92a98cfdd59312467e29d4cf
  evalCBN :: AbsLambdaNat.Exp -> AbsLambdaNat.Exp
  {- Arity: 1, Strictness: <S,1*U> -}
135d1612b63a8d05575bc4f277ea608a
  execCBN :: AbsLambdaNat.Program -> AbsLambdaNat.Exp
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AbsLambdaNat.Program) ->
                 case ds of wild { AbsLambdaNat.Prog e ->
                 Interpreter.evalCBN e }) -}
574eb5f64bde1d69d482afd88d53c529
  fresh :: AbsLambdaNat.Exp -> AbsLambdaNat.Id
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.fresh1
                  `cast`
                (<AbsLambdaNat.Exp>_R ->_R Sym (AbsLambdaNat.N:Id[0])) -}
63cbb232bbcea8430ec5b83b2cc6fdea
  fresh1 :: AbsLambdaNat.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AbsLambdaNat.Exp) ->
                 Interpreter.fresh_pickFresh
                   Interpreter.fresh_infList
                   (Interpreter.$sfromList (Interpreter.fresh_ x))) -}
9e0b1a3283d213267179cbf0373bdaf4
  fresh_ :: AbsLambdaNat.Exp -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
045a04239eadc4b08e019306010d43f2
  fresh_go :: GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U> -}
9498be9347b5db13f670e3e574a4cfea
  fresh_infList :: [[GHC.Types.Char]]
  {- Unfolding: (Interpreter.fresh_go 97#) -}
67b52ea3155271463168924092d5fa0e
  fresh_pickFresh ::
    [GHC.Base.String]
    -> Data.Set.Internal.Set GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
49132d840659c41daaf376c26dd24a11
  subst ::
    AbsLambdaNat.Id
    -> AbsLambdaNat.Exp -> AbsLambdaNat.Exp -> AbsLambdaNat.Exp
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
db70efeb97f1a5440e6870e01c1f1f92
  unID :: Interpreter.ID a -> a
  RecSel Left Interpreter.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.unID1
                  `cast`
                (forall (a :: <*>_N).
                 <Interpreter.ID a>_R ->_R Interpreter.N:ID[0] <a>_R) -}
db70efeb97f1a5440e6870e01c1f1f92
  unID1 :: Interpreter.ID a -> Interpreter.ID a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Interpreter.ID a) -> ds) -}
c234589c50447fae57a284669a932b6f
  unIDM :: Interpreter.IDM m a -> m
  RecSel Left Interpreter.IDM
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.unIDM1
                  `cast`
                (forall (m :: <*>_N) (a :: <*>_N).
                 <Interpreter.IDM m a>_R ->_R Interpreter.N:IDM[0] <m>_R <a>_P) -}
c234589c50447fae57a284669a932b6f
  unIDM1 :: Interpreter.IDM m a -> Interpreter.IDM m a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ m @ a (ds :: Interpreter.IDM m a) -> ds) -}
instance [orphan] Data.Data.Data [AbsLambdaNat.Exp]
  = Interpreter.$fDataExp
instance [orphan] Data.Data.Data [AbsLambdaNat.Id]
  = Interpreter.$fDataId
"SPEC/Interpreter fromList @ String" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                 GHC.Base.String)
  Data.Set.Internal.fromList @ [GHC.Types.Char] $dOrd
  = Interpreter.$sfromList
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

